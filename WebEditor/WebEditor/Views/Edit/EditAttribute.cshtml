@using TextAdventures.Quest;
@using WebEditor.Views.Edit;
@model WebEditor.Models.Element
           
@{
    IEditorControl cntrl = ViewBag.control;
    object value = ViewBag.data;
}
           
<script type="text/javascript">
    function postChanges() {
        var data = $('form').serialize();
        $.post('/Edit/SaveElement', data, function (response) {
            // refresh the attribute row with updated values after save
            var attributeRowHtml = $('#attr__@(cntrl.Attribute)', $(response)).html();
            $('#attr__@(cntrl.Attribute)').html(attributeRowHtml);
        });
    }

    $(document).ready(function () {
        // rename the name attribute for inputs within the attribute editor
        // to differentiate from similar inputs from the form
        $('.multi-control-editor :input').each(function () {
            var id = $(this).attr('id');
            var name = $(this).attr('name');
            id = 'attr-' + id;
            name = 'attr_' + name;
            $(this).removeAttr('id');
            $(this).removeAttr('name');
            $(this).attr('id', id);
            $(this).attr('name', name);
        });

        $(".elementEditorCheckbox").change(function () {
            debugger;
            $("input[name='attributeEditorValue']").val($(this).is(':checked'));
            postChanges();
        });

        $(".elementEditorTextbox").change(function () {
            debugger;
            $("input[name='attributeEditorValue']").val($(this).val());
            postChanges();
        });

        $(".elementEditorTextbox").on('keyUp paste', function () {            
            $("input[name='attributeEditorValue']").val($(this).val());
        });

        $(".multi-dropdown").change(function () {
            var key = $(this).attr("data-key");
            var value = $(this).find('option:selected').attr("value");
            $.post('/Edit/ProcessAction', { id: "@(Model.GameId)", key: "@(Model.Key)", tab: "@(Model.Tab)", actionCmd: "multi set " + key + ";" + value }, function (response) {
                debugger;
                // refresh the attribute list table
                var tempScrollPos = $('#attributesListScroller').scrollTop();
                var attributeListHtml = $('#attributesListEditor', $(response)).html();
                $('#attributesListEditor').html(attributeListHtml);
                initializeAttributeListEditor();
                $('#attributesListScroller').scrollTop(tempScrollPos);
            });
        });
    });
</script>

@Html.Hidden("attributeEditorFieldName", cntrl.Attribute)
@Html.Hidden("attributeEditorValue")

<div id="attributeMultiControl_editor">
@RenderMultiControl(cntrl, value);
</div>

@helper RenderMultiControl(IEditorControl ctl, object value)
    {
        string caption = ctl.GetString("selfcaption");
        if (caption != null)
        {
        <text>@caption:</text>
        }
        IDictionary<string, string> types = ctl.GetDictionary("types");
        string selectedType = ControlHelpers.GetTypeName(value);
    @Html.DropDownList(ctl.Attribute + "-type", types.Select(t => new SelectListItem { Text = t.Value, Value = t.Key, Selected = (t.Key == selectedType) }), new { @class = "multi-dropdown", data_key = ctl.Attribute })
    <br />
        string controlType = ControlHelpers.GetEditorNameForType(selectedType, ctl.GetDictionary("editors"));
        string ctlCaption = null;
        if (controlType == "checkbox")
        {
            ctlCaption = ctl.GetString("checkbox");
        }
    <div class="multi-control-editor">
        @RenderEditorControl(ctl, false, controlType, ctlCaption)
    </div>
}

@helper RenderEditorControl(IEditorControl ctl, bool isFirst, string controlType, string caption = null)
    {
    object value;
    value = (ctl.Attribute == null) ? null : Model.EditorData.GetAttribute(ctl.Attribute);
    if (caption == null)
    {
        caption = ctl.Caption;
    }
    switch (controlType)
    {
        case "checkbox":
            @Html.CheckBox(ctl.Attribute, value as bool? == true, new { @class = "elementEditorCheckbox" })
            @Html.Label(ctl.Attribute, caption)
       break;
        case "textbox":
            @Html.TextBox(ctl.Attribute, (string)value, new { style = "width: 100%", @class = "elementEditorTextbox" })
       break;
        case "list":
            @Html.Action("EditStringList", new { id = Model.GameId, key = Model.Key, control = ctl })
       break;
        case @"script":
            @Html.Action("EditScript", new { id = Model.GameId, key = Model.Key, control = ctl })
       break;
        case "attributes":
       var m_data = (IEditorDataExtendedAttributeInfo)Model.EditorData;
            <div style="height:500px;overflow:scroll;width:630px;">
            <table style="margin-top:18px;">
            <thead style="position:absolute;height:18px;margin-top:-22px;">
            <tr class="ui-corner-tr ui-widget-header">
                <th style="width:200px;">Name</th>
                <th style="width:300px;">Value</th>
                <th style="width:100px;">Source</th>
            </tr>
            </thead>
            <tbody style="height:200px;overflow:scroll;">
            @foreach (var attr in m_data.GetAttributeData())
            {
               <tr class="attributeRow" style="cursor:pointer;">
                   <td style="max-width:200px;word-wrap:break-word;">@Html.Raw(attr.AttributeName)</td>
                   <td style="max-width:300px;word-wrap:break-word;">@Html.Raw(EditorUtility.GetDisplayString(m_data.GetAttribute(attr.AttributeName)))</td>
                   <td style="max-width:100px;">@Html.Raw(attr.Source)</td>                  
               </tr>
            } 
            </tbody>
            </table> 
            <div id="attributeRowEditor">
            </div>
            </div>
            break;
        case "label":
            <div class="elementEditorLabel">
            @{
            var href = ctl.GetString("href");
            if (href == null)
            {
                    @caption
            }
            else
            {
                    <a href="@href" target="_blank">@caption</a>
            }
            }
            </div>
            break;
        case "title":
            string className = isFirst ? "elementEditorTitleTop" : "elementEditorTitle";
            <div class="@className">@caption</div>
                               break;
        case "dropdown":
                               string selectedItem = value as string;
                               IEnumerable<SelectListItem> valuesList = ControlHelpers.GetDropdownValues(ctl, selectedItem, Model.Controller);
            @Html.DropDownList(ctl.Attribute, valuesList, new { @class = "elementEditorDropdown" });
                                                                                                   break;
        case "richtext":
                                                                                                   // replace any <br/> tags with NewLine character
            @Html.TextArea(ctl.Attribute, System.Text.RegularExpressions.Regex.Replace(value.ToString(), @"(?i:<br/?>)", Environment.NewLine), 10, 80, new { @class = "richtext", style = "width: 40em; height: 10em" })
       break;
        case "number":
       string minMax = string.Empty;
       int? min = ctl.GetInt("minimum");
       int? max = ctl.GetInt("maximum");
       if (min.HasValue)
       {
           minMax += string.Format("min={0}", min);
       }
       if (max.HasValue)
       {
           if (minMax.Length > 0)
           {
               minMax += " ";
           }
           minMax += string.Format("max={0}", max);
       }
            <input type="number" name="@ctl.Attribute" id="@ctl.Attribute" value="@Model.EditorData.GetAttribute(ctl.Attribute)" @minMax style="width: 50px" />
                                                                                                                            break;
        case "multi":
            @RenderMultiControl(ctl, value)
       break;
        case "dropdowntypes":
            @Html.DropDownList("types-dropdown-" + ctl.Id, ControlHelpers.GetDropDownTypesControlItems(ctl, Model.Controller, Model.Key), new { @class = "types-dropdown", data_key = ctl.Id });
                                                                                                                                                                                         break;
        case "elementslist":
            @Html.Action("ElementsList", new { id = Model.GameId, key = Model.Key, control = ctl })
       break;
        case "exits":
            @Html.Action("EditExits", new { id = Model.GameId, key = Model.Key, control = ctl })
       break;
        case "objects":
       IEditableObjectReference objectRef = value as IEditableObjectReference;
       string selectedValue = null;
       if (objectRef != null)
       {
           selectedValue = objectRef.Reference;
       }
       List<SelectListItem> items = new List<SelectListItem>(
           ControlHelpers.GetObjectListNames(ctl, Model.Controller).OrderBy(s => s, StringComparer.CurrentCultureIgnoreCase)
           .Select(s => new SelectListItem { Text = s, Value = s, Selected = (selectedValue == s) })
           );
       // if ctl.Attribute is "key" (or any name that exists in the Model), ASP.NET MVC ignores Selected value
            @Html.DropDownList("dropdown-" + ctl.Attribute, items);
                                                                  break;
        case "verbs":
            @Html.Action("EditVerbs", new { id = Model.GameId, key = Model.Key, control = ctl })
       break;
        case "file":
       string source = string.Join(";", ctl.GetString("source").Split(';').Select(s => s.Substring(1)));
            <div style="display:inline-block;height:auto;width:auto;">
            <div style="float:left;">
            @Html.TextBox(ctl.Attribute, (string)value, new { @readonly = "readonly", @class = "elementEditorFile" })
            </div>
            @if (ctl.GetBool("preview") && source.Contains("jpg") && !string.IsNullOrEmpty(value.ToString()))
            {
                <div style="float:left;position:relative;top:-12px;">
                <button type="button" class="img-preview" data-key="@ctl.Attribute" data-extensions="@source">
                    <img src="/ImageProcessor.ashx?h=40&w=40&gameId=@Model.GameId&image=@value.ToString()" />
                </button>
                </div>
            }
            <div style="float:left;">
            <button type="button" class="file-upload" data-key="@ctl.Attribute" data-extensions="@source">Choose file</button>
            </div>
            </div>
                                                                                            break;
        case "scriptdictionary":
            @Html.Action("EditScriptDictionary", new { id = Model.GameId, key = Model.Key, control = ctl })
       break;
        case "stringdictionary":
            @Html.Action("EditStringDictionary", new { id = Model.GameId, key = Model.Key, control = ctl })
       break;
        case "gamebookoptions":
            @Html.Action("EditGameBookOptions", new { id = Model.GameId, key = Model.Key, control = ctl })
       break;
        case "pattern":
       IEditableCommandPattern commandPattern = value as IEditableCommandPattern;
       string text = (commandPattern != null) ? commandPattern.Pattern : string.Empty;
            @Html.TextBox(ctl.Attribute, text, new { style = "width: 100%", @class = "elementEditorTextbox" })
       break;
        case null:
       break;
        default:
       throw new ArgumentException(string.Format("Invalid control type: {0}", controlType));
    }
}