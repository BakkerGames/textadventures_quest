@model WebEditor.Models.Script
@using AxeSoftware.Quest

@RenderScripts(Model.Scripts, Model.Attribute)

@helper RenderScripts(IEditableScripts scripts, string attribute)
{
    <div class="ui-widget-header ui-corner-all toolbar" id="script-toolbar-@attribute" style="display: none">
        <button type="button" class="script-delete" data-key="@attribute">Delete</button>
    </div>

    <div class="ui-corner-all scriptEditor">
        @{
            if (scripts != null) {
                int count = 0;
                foreach (IEditableScript script in scripts.Scripts)
                {
                    if (Html.ViewData.ModelState.ContainsKey(script.Id) && Html.ViewData.ModelState[script.Id].Errors.Count > 0)
                    {
                        <div class="elementEditorError">
                            @Html.ValidationMessage(script.Id)
                            <button type="button" class="error-clear" data-key="@script.Id">Clear</button>
                        </div>
                    }
                    IEditorDefinition definition = Model.Controller.GetEditorDefinition(script);
                    <div class="scriptLine">
                        @Html.CheckBox("selected-" + attribute + "-" + count.ToString(), new { @class = "script-select", data_key = attribute })
                        @if (script.Type != ScriptType.If)
                        {
                            IEditorData scriptEditorData = Model.Controller.GetScriptEditorData(script);
                            foreach (IEditorControl ctl in definition.Controls)
                            {
                                if (ctl.GetBool("breakbefore"))
                                {
                                    <br /><text>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</text>
                                }
                                else
                                {
                                    <text> </text>
                                }
                                object value = ctl.Attribute == null ? null : scriptEditorData.GetAttribute(ctl.Attribute);
                                @RenderEditorControl(ctl, value, attribute + "-" + count.ToString())
                            }
                        }
                        else
                        {
                            @RenderIfScript((EditableIfScript)script, attribute + "-" + count.ToString())
                        }
                    </div>
                    count++;
                }
            }
        }

        <button type="button" class="script-add" data-key="@attribute">Add new script</button>
    </div>
}

@helper RenderEditorControl(IEditorControl ctl, object value, string attributePrefix)
{
    string name = attributePrefix + "-" + ctl.Attribute;
    switch (ctl.ControlType)
    {
        case "checkbox":
            @Html.CheckBox(name, value as bool? == true)
            @Html.Label(name, ctl.Caption)
            break;
        case "textbox":
            bool multiLine = ctl.GetBool("multiline");
            if (multiLine)
            {
                string colour = ctl.GetString("colour");
                string extraStyle = "";
                if (colour != null)
                {
                    extraStyle = "color: " + colour;
                }
                @Html.TextArea(name, (string)value, new { style = "width: 350px; " + extraStyle });
            }
            else
            {
                @Html.TextBox(name, (string)value)
            }
            break;
        case "label":
            @ctl.Caption
            break;
        case "dropdown":
            IEnumerable<string> valuesList = WebEditor.Views.Edit.Controls.GetDropdownValues(ctl);
            @Html.DropDownList(name, valuesList.Select(v => new SelectListItem { Text = v, Value = v, Selected = (v == (string)(value)) }));
            break;
        case "expression":
            @RenderExpressionControl(ctl, name, (string)value)
            break;
        case "script":
            string caption = ctl.GetString("caption");
            if (caption != null)
            {
                <text>@caption:</text>
            }
            <div class="childScript">
            @RenderScripts((IEditableScripts)value, name)
            </div>
            break;
        case "scriptdictionary":
            @RenderScriptDictionary(ctl, (IEditableDictionary<IEditableScripts>)value, name)
            break;
        default:
            <text>[@ctl.ControlType]</text>
            break;
    }
}

@helper RenderExpressionControl(IEditorControl ctl, string name, string value)
{
    string templatesFilter = ctl.GetString("usetemplates");

    if (templatesFilter != null)
    {
        @RenderTemplateControl(name, value, templatesFilter);
    }

    string simpleEditor = ctl.GetString("simpleeditor") ?? "textbox";
    string simple = ctl.GetString("simple");

    if (simpleEditor == "boolean" || simpleEditor != null)
    {
        List<SelectListItem> list = new List<SelectListItem>();
        MvcHtmlString editorHtml = null;
        bool simpleEditorVisible = (simple != null || simpleEditor == "boolean") && IsSimpleExpression(ctl, simpleEditor, value);
        string simpleEditorDisplayStyle = simpleEditorVisible ? "inline" : "none";
        string expressionDisplayStyle = simpleEditorVisible ? "none" : "inline";
        string simpleValue = simpleEditorVisible ? ConvertToSimpleExpression(simpleEditor, value) : string.Empty;
        
        switch (simpleEditor)
        {
            case "textbox":
                bool multiLine = ctl.GetBool("multiline");
                if (multiLine)
                {
                    editorHtml = Html.TextArea(name + "-simpleeditor", simpleValue, new { style = "width: 350px; display: " + simpleEditorDisplayStyle });
                }
                else
                {
                    editorHtml = Html.TextBox(name + "-simpleeditor", simpleValue, new { style = "width: 350px; display: " + simpleEditorDisplayStyle });
                }
                break;
            case "file":
                // TO DO
                editorHtml = Html.TextBox(name + "-simpleeditor", simpleValue, new { style = "width: 350px; display: " + simpleEditorDisplayStyle });
                break;
            case "boolean":
                list.Add(new SelectListItem { Text = "yes", Selected = (value == "true") });
                list.Add(new SelectListItem { Text = "no", Selected = (value == "false") });
                break;
            case "objects":
                List<SelectListItem> items = new List<SelectListItem>(
                    GetObjectListNames(ctl).OrderBy(s => s, StringComparer.CurrentCultureIgnoreCase)
                    .Select(s => new SelectListItem { Text = s, Value = s, Selected = (value == s) })
                    );
                editorHtml = Html.DropDownList(name + "-simpleeditor", items, new { style = "display: " + simpleEditorDisplayStyle });
                break;
            case "number":
                editorHtml = new MvcHtmlString("<input type=\"number\" name=\"" + name + "-simpleeditor\" id=\"" + name + "-simpleeditor\"  value=\"" + simpleValue + "\" style=\"width: 50px; display: " + simpleEditorDisplayStyle + "\" />");
                break;
            case "dropdown":
                IEnumerable<string> valuesList = WebEditor.Views.Edit.Controls.GetDropdownValues(ctl);
                editorHtml = Html.DropDownList(name + "-simpleeditor", valuesList.Select(v => new SelectListItem { Text = v, Value = v, Selected = (v == simpleValue) }), new { style = "display: " + simpleEditorDisplayStyle });
                break;
            default:
                throw new InvalidOperationException("Invalid control type for expression");
        }
        
        if (editorHtml != null && (simple != null || simpleEditor == "boolean"))
        {
            list.Add(new SelectListItem { Text = simple, Selected = simpleEditorVisible });
        }

        if (list.Count > 0)
        {
            list.Add(new SelectListItem { Text = "expression", Selected = !simpleEditorVisible });
            @Html.DropDownList(name + "-expressioneditordropdown", list, new { @class = "expression-dropdown", data_key = name })
        }

        @Html.TextBox(name + "-expressioneditor", value, new { style = "width: 350px; display: " + expressionDisplayStyle });

        if (editorHtml != null)
        {
            @editorHtml
        }
    }
}

@helper RenderTemplateControl(string name, string value, string templatesFilter)
{
    IEditorDefinition editorDefinition = Model.Controller.GetExpressionEditorDefinition(value, templatesFilter);
    bool useTemplate = (editorDefinition != null);
    string templateName = null;
    List<SelectListItem> list = new List<SelectListItem>();

    list.Add(new SelectListItem { Text = "expression", Selected = !useTemplate });

    if (useTemplate)
    {
        templateName = Model.Controller.GetExpressionEditorDefinitionName(value, templatesFilter);
    }

    foreach (string item in Model.Controller.GetExpressionEditorNames(templatesFilter))
    {
        list.Add(new SelectListItem { Text = item, Selected = (item == templateName) });
    }
    
    @Html.DropDownList(name + "-templatedropdown", list, new { @class = "template-dropdown", data_key = name })

    string expressionVisibility = "inline";

    if (useTemplate)
    {
        string templateEditorControlsSpanName = name + "-templateeditor";
        <span id="@templateEditorControlsSpanName">
            @{
                expressionVisibility = "none";
                int count = 0;
                IEditorData data = Model.Controller.GetExpressionEditorData(value, templatesFilter, null);
                foreach (IEditorControl ctl in editorDefinition.Controls)
                {
                    object editorValue = ctl.Attribute == null ? null : data.GetAttribute(ctl.Attribute);
                    @RenderEditorControl(ctl, editorValue, name)
                    count++;
                }
            }
        </span>
    }
    
    @Html.TextBox(name, value, new { style = "width: 350px; display: " + expressionVisibility });
}

@helper RenderIfScript(EditableIfScript script, string attributePrefix)
{
    <text>If: </text>
    @RenderTemplateControl(attributePrefix + "-expression", (string)script.GetAttribute("expression"), "if")
    <div class="childScript">
    @RenderScripts(script.ThenScript, attributePrefix + "-then")
    </div>
    
    <div class="ifSection ui-widget-header ui-corner-all toolbar" id="ifsection-toolbar-@attributePrefix" style="display: none">
        <button type="button" class="ifsection-delete" data-key="@attributePrefix">Remove section</button>
    </div>
    
    int elseIfCount = 0;
    foreach (EditableIfScript.EditableElseIf elseIf in script.ElseIfScripts)
    {
        <div class="ifSection">
        @Html.CheckBox("selectifsection-" + attributePrefix + "-elseif" + elseIfCount.ToString(), new { @class = "ifsection-select", data_key = attributePrefix })
        Else If:
        @RenderTemplateControl(attributePrefix + "-elseif" + elseIfCount.ToString() + "-expression", (string)elseIf.GetAttribute("expression"), "if")
        </div>
        <div class="childScript">
        @RenderScripts(elseIf.EditableScripts, attributePrefix + "-elseif" + elseIfCount.ToString())
        </div>

        elseIfCount++;
    }
    
    <div class="ifSection"><button type="button" class="script-if-add-elseif" data-key="@attributePrefix">Add Else If</button></div>

    if (script.ElseScript == null)
    {
        <div class="ifSection">
        <button type="button" class="script-if-add-else" data-key="@attributePrefix">Add Else</button>
        </div>
    }
    else
    {
        <div class="ifSection">
        @Html.CheckBox("selectifsection-" + attributePrefix + "-else", new { @class = "ifsection-select", data_key = attributePrefix })
        Else:
        </div>
        <div class="childScript">
        @RenderScripts(script.ElseScript, attributePrefix + "-else")
        </div>
    }
}

@helper RenderScriptDictionary(IEditorControl ctl, IEditableDictionary<IEditableScripts> value, string attributePrefix)
{
    <div class="scriptDictionarySection ui-widget-header ui-corner-all toolbar" id="scriptDictionarySection-toolbar-@attributePrefix" style="display: none">
        <button type="button" class="scriptDictionarySection-delete" data-key="@attributePrefix">Remove</button>
    </div>
    
    int itemCount = 0;
    foreach (IEditableListItem<IEditableScripts> item in value.Items.Values)
    {
        <div class="scriptDictionarySection">
        @Html.CheckBox("selectscriptitem-" + attributePrefix + "-" + itemCount.ToString(), new { @class = "scriptDictionarySection-select", data_key = attributePrefix })
        @Html.TextBox(attributePrefix + "-key" + itemCount.ToString(), item.Key)
        </div>
        <div class="childScript">
        @RenderScripts(item.Value, attributePrefix + "-value" + itemCount.ToString())
        </div>
        itemCount++;
    }
    string keyPrompt = ctl.GetString("keyprompt");
    <div class="scriptDictionarySection"><button type="button" class="script-dictionary-add" data-key="@attributePrefix" data-prompt="@keyPrompt">Add</button></div>
}

@functions {
    private bool IsSimpleExpression(IEditorControl ctl, string simpleEditor, string expression)
    {
        if (simpleEditor == "boolean")
        {
            return (expression == "true" || expression == "false");
        }

        if (simpleEditor == "objects")
        {
            return expression.Length == 0  || GetObjectListNames(ctl).Contains(expression);
        }

        if (simpleEditor == "number")
        {
            int number;
            return int.TryParse(expression, out number);
        }

        return EditorUtility.IsSimpleStringExpression(expression);
    }

    private string ConvertToSimpleExpression(string simpleEditor, string expression)
    {
        switch (simpleEditor)
        {
            case "boolean":
            case "objects":
            case "number":
                return expression;
            default:
                return EditorUtility.ConvertToSimpleStringExpression(expression);
        }
    }

    private IEnumerable<string> GetObjectListNames(IEditorControl ctl)
    {
        string source = ctl.GetString("source");
        if (source != null)
        {
            return Model.Controller.GetElementNames(source);
        }
        else
        {
            string objectType = ctl.GetString("objecttype");
            IEnumerable<string> objectNames = Model.Controller.GetObjectNames(objectType ?? "object");
            return new List<string> { "" }.Union(objectNames);
        }
    }
}