@using AxeSoftware.Quest;
@using WebEditor.Views.Edit;
@model WebEditor.Models.Element

@if (!string.IsNullOrEmpty(Model.Error))
{
    <div class="elementEditorError">
        <b>Sorry, an internal error occurred:</b><br />
        @Model.Error
    </div>
}

@if (Model.OtherElementErrors.Count > 0)
{
    <div class="elementEditorError">
        @foreach (var data in Model.OtherElementErrors)
        {
            <text>"@data.Key" has the following errors:</text>
            <ul>
                @foreach (string message in data.Value)
                {
                    <li>@message</li>
                }
            </ul>
        }
    </div>
}

<div id="elementEditorForm">
    <div class="elementEditorName">@Model.Name</div>

    @using (Ajax.BeginForm("SaveElement", new { }, new AjaxOptions { InsertionMode = InsertionMode.Replace, HttpMethod = "POST", UpdateTargetId = "elementEditorForm", OnComplete = "initialiseElementEditor" }))
    {
        <input type="hidden" name="_game_id" value="@Model.GameId" />
        <input type="hidden" name="_key" value="@Model.Key" />
        <input type="hidden" name="_redirectToElement" id="_redirectToElement" value="@Model.Key" />
        <input type="hidden" name="_additionalAction" id="_additionalAction" value="" />
        <input type="hidden" name="_additionalActionTab" id="_additionalActionTab" value="@Model.Tab" />
        <input type="hidden" name="_ignoreExpression" id="_ignoreExpression" value="" />
        <input type="hidden" name="_refreshTreeSelectElement" id="_refreshTreeSelectElement" value="@Model.RefreshTreeSelectElement" />
        <input type="hidden" name="_popupError" id="_popupError" value="@Model.PopupError" />
        <input type="hidden" name="_newObjectPossibleParents" id="_newObjectPossibleParents" value="@Model.NewObjectPossibleParents" />
        <input type="hidden" name="_canUndo" id="_canUndo" value="@Model.CanUndo" />
        <input type="hidden" name="_canRedo" id="_canRedo" value="@Model.CanRedo" />
        if (Model.EditorDefinition != null)
        {
            <div id="elementEditorTabs">
                @{
                    int count = 0;
                }
                <ul>    
                    @foreach (IEditorTab def in Model.EditorDefinition.Tabs.Values)
                    {
                        if (!def.IsTabVisible(Model.EditorData))
                        {
                            continue;
                        }
                        count++;
                        string id = "#elementEditorTab" + count;
                        <li><a href="@id">@def.Caption</a></li>
                    }
                </ul>
                @{
                    count = 0;
                }
                @foreach (IEditorTab def in Model.EditorDefinition.Tabs.Values)
                {
                    if (!def.IsTabVisible(Model.EditorData))
                    {
                        continue;
                    }
                    count++;
                    string id = "elementEditorTab" + count;
                    <div id="@id">
                        @{
                           bool isFirst = true;
                        }
                        <table style="width: 100%">
                            <colgroup>
                                <col style="width: 15%" />
                                <col />
                            </colgroup>
                            @foreach (IEditorControl ctl in def.Controls)
                            {
                                if (!ctl.IsControlVisible(Model.EditorData))
                                {
                                    continue;
                                }
                                if (ctl.Attribute != null && Html.ViewData.ModelState.ContainsKey(ctl.Attribute))
                                {
                                    <tr>
                                        <td class="elementEditorCell" colspan="2">
                                            <div class="elementEditorError">
                                                @Html.ValidationMessage(ctl.Attribute)
                                                <button type="button" class="error-clear" data-key="@ctl.Attribute">Clear</button>
                                            </div>
                                        </td>
                                    </tr>
                                }

                                if (IsSelfCaption(ctl))
                                {
                                    <tr>
                                        <td class="elementEditorCell" colspan="2">@RenderEditorControl(ctl, isFirst, ctl.ControlType)</td>
                                    </tr>
                                }
                                else if (IsLongCaption(ctl))
                                {
                                    <tr>
                                        <td colspan="2">@ctl.Caption:</td>
                                    </tr>
                                    <tr>
                                        <td class="elementEditorCell" colspan="2">@RenderEditorControl(ctl, isFirst, ctl.ControlType)</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td class="elementEditorCaption">@ctl.Caption:</td>
                                        <td class="elementEditorCell">
                                            @RenderEditorControl(ctl, isFirst, ctl.ControlType)
                                        </td>
                                    </tr>
                                }
                                isFirst = false;
                            }
                        </table>
                    </div>
                }
            </div>
            <input id="elementEditorSave" type="submit" value="Save" style="display: none" />
        }
    }
</div>

@helper RenderEditorControl(IEditorControl ctl, bool isFirst, string controlType)
{
    object value;
    value = (ctl.Attribute == null) ? null :  Model.EditorData.GetAttribute(ctl.Attribute);
    switch (controlType)
    {
        case "checkbox":
            @Html.CheckBox(ctl.Attribute, value as bool? == true)
            @Html.Label(ctl.Attribute, ctl.Caption)
            break;
        case "textbox":
            @Html.TextBox(ctl.Attribute, (string)value, new { style = "width: 100%" })
            break;
        case "list":
            @Html.Action("EditStringList", new { id = Model.GameId, key = Model.Key, control = ctl })
            break;
        case @"script":
            @Html.Action("EditScript", new { id = Model.GameId, key = Model.Key, control = ctl })
            break;
        case "label":
            <div class="elementEditorLabel">@ctl.Caption</div>
            break;
        case "title":
            string className = isFirst ? "elementEditorTitleTop" : "elementEditorTitle";
            <div class="@className">@ctl.Caption</div>
            break;
        case "dropdown":
            string selectedItem = value as string;
            IEnumerable<string> valuesList = Controls.GetDropdownValues(ctl, selectedItem);
            @Html.DropDownList(ctl.Attribute, valuesList.Select(v => new SelectListItem { Text = v, Value = v, Selected = (v == selectedItem) }));
            break;
        case "richtext":
            @Html.TextArea(ctl.Attribute, (string)value, 10, 80, new { @class = "richtext", style = "width: 40em; height: 10em" })
            break;
        case "number":
            <input type="number" name="@ctl.Attribute" id="@ctl.Attribute"  value="@Model.EditorData.GetAttribute(ctl.Attribute)" style="width: 50px" />
            break;
        case "multi":
            @RenderMultiControl(ctl, value)
            break;
        case "dropdowntypes":
            @Html.DropDownList("types-dropdown-" + ctl.Id, Controls.GetDropDownTypesControlItems(ctl, Model.Controller, Model.Key), new { @class = "types-dropdown", data_key = ctl.Id }); 
            break;
        case null:
            break;
        default:
            <text>[@ctl.ControlType]</text>
            break;
    }
}

@helper RenderMultiControl(IEditorControl ctl, object value)
{
    string caption = ctl.GetString("selfcaption");
    if (caption != null)
    {
        <text>@caption:</text>
    }
    IDictionary<string, string> types = ctl.GetDictionary("types");
    string selectedType = Controls.GetTypeName(value);
    @Html.DropDownList(ctl.Attribute + "-type", types.Select(t => new SelectListItem { Text = t.Value, Value = t.Key, Selected = (t.Key == selectedType) }), new { @class = "multi-dropdown", data_key = ctl.Attribute })
    string controlType = Controls.GetEditorNameForType(selectedType, ctl.GetDictionary("editors"));
    @RenderEditorControl(ctl, false, controlType)
}

@functions {
    bool IsLongCaption(IEditorControl ctl)
    {
        if (ctl.Caption == null) return false;
        return (ctl.Caption.Length > 15);
    }

    bool IsSelfCaption(IEditorControl ctl)
    {
        switch (ctl.ControlType)
        {
            case "checkbox":
            case "label":
            case "title":
                return true;
            case "multi":
                return ctl.GetString("selfcaption") != null;
        }
        return false;
    }
}