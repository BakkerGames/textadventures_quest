@using AxeSoftware.Quest;
@model WebEditor.Models.Element

<div id="elementEditorForm">
    <div class="elementEditorName">@Model.Name</div>

    @using (Ajax.BeginForm("SaveElement", new { }, new AjaxOptions { InsertionMode = InsertionMode.Replace, HttpMethod = "POST", UpdateTargetId = "elementEditorForm", OnComplete = "initialiseElementEditor" }))
    {
        <input type="hidden" name="_game_id" value="@Model.GameId" />
        <input type="hidden" name="_key" value="@Model.Key" />
        <input type="hidden" name="_redirectToElement" id="_redirectToElement" value="@Model.Key" />
        <input type="hidden" name="_additionalAction" id="_additionalAction" value="" />
        <input type="hidden" name="_additionalActionTab" id="_additionalActionTab" value="@Model.Tab" />
        <input type="hidden" name="_ignoreExpression" id="_ignoreExpression" value="" />
        <div id="elementEditorTabs">
            @{
                int count = 0;
            }
            <ul>    
                @foreach (IEditorTab def in Model.EditorDefinition.Tabs.Values)
                {
                    if (!def.IsTabVisible(Model.EditorData))
                    {
                        continue;
                    }
                    count++;
                    string id = "#elementEditorTab" + count;
                    <li><a href="@id">@def.Caption</a></li>
                }
            </ul>
            @{
                count = 0;
            }
            @foreach (IEditorTab def in Model.EditorDefinition.Tabs.Values)
            {
                if (!def.IsTabVisible(Model.EditorData))
                {
                    continue;
                }
                count++;
                string id = "elementEditorTab" + count;
                <div id="@id">
                    @{
                        bool isFirst = true;
                    }
                    <table style="width: 100%">
                        <colgroup>
                            <col style="width: 15%" />
                            <col />
                        </colgroup>
                        @foreach (IEditorControl ctl in def.Controls)
                        {
                            if (!ctl.IsControlVisible(Model.EditorData))
                            {
                                continue;
                            }
                            if (IsSelfCaption(ctl))
                            {
                                <tr>
                                    <td class="elementEditorCell" colspan="2">@RenderEditorControl(ctl, isFirst)</td>
                                </tr>
                            }
                            else if (IsLongCaption(ctl))
                            {
                                <tr>
                                    <td colspan="2">@ctl.Caption:</td>
                                </tr>
                                <tr>
                                    <td class="elementEditorCell" colspan="2">@RenderEditorControl(ctl, isFirst)</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td class="elementEditorCaption">@ctl.Caption:</td>
                                    <td class="elementEditorCell">
                                        @RenderEditorControl(ctl, isFirst)
                                    </td>
                                </tr>
                            }
                            isFirst = false;
                        }
                    </table>
                </div>
            }
        </div>
        <input id="elementEditorSave" type="submit" value="Save" />
    }
</div>

@helper RenderEditorControl(IEditorControl ctl, bool isFirst)
    {
    switch (ctl.ControlType)
    {
        case "checkbox":
            @Html.CheckBox(ctl.Attribute, Model.EditorData.GetAttribute(ctl.Attribute) as bool? == true)
            @Html.Label(ctl.Attribute, ctl.Caption)
            break;
        case "textbox":
            @Html.TextBox(ctl.Attribute, (string)Model.EditorData.GetAttribute(ctl.Attribute), new { style = "width: 100%" })
            break;
        case "list":
            @Html.Action("EditStringList", new { id = Model.GameId, key = Model.Key, control = ctl })
            break;
        case @"script":
            @Html.Action("EditScript", new { id = Model.GameId, key = Model.Key, control = ctl })
            break;
        case "label":
            <div class="elementEditorLabel">@ctl.Caption</div>
            break;
        case "title":
            string className = isFirst ? "elementEditorTitleTop" : "elementEditorTitle";
            <div class="@className">@ctl.Caption</div>
            break;
        case "dropdown":
            IEnumerable<string> valuesList = ctl.GetListString("validvalues");
            IDictionary<string, string> valuesDictionary = ctl.GetDictionary("validvalues");
            bool fontsList = ctl.GetBool("fontslist");

            // TO DO: Need a way of allowing free text entry
            
            if (valuesDictionary != null)
            {
                valuesList = valuesDictionary.Values.ToArray();
            }
            else if (fontsList)
            {
                // TO DO: Fonts list should be a standard list of web-safe fonts, not the list of fonts on the server
                List<string> fonts = new List<string>();
                foreach (var family in System.Drawing.FontFamily.Families)
                {
                    fonts.Add(family.Name);
                }
                valuesList = fonts;
            }
                
            if (valuesList == null)
            {
                throw new Exception("Invalid type for validvalues");
            }

            string selectedItem = Model.EditorData.GetAttribute(ctl.Attribute) as string;
            
            @Html.DropDownList(ctl.Attribute, valuesList.Select(v => new SelectListItem { Text = v, Selected = (v == selectedItem) }));

            break;
        default:
            <text>[@ctl.ControlType]</text>
            break;
    }
}

@functions {
    bool IsLongCaption(IEditorControl ctl)
    {
        if (ctl.Caption == null) return false;
        return (ctl.Caption.Length > 15);
    }

    bool IsSelfCaption(IEditorControl ctl)
    {
        switch (ctl.ControlType)
        {
            case "checkbox":
            case "label":
            case "title":
                return true;
        }
        return false;
    }
}