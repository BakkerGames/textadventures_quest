<library>
  <type name="defaultgame">
    <enablehyperlinks/>
    <showdescriptiononenter/>
    <autodescription/>
    <defaultfont>Arial</defaultfont>
    <defaultfontsize type="int">9</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <compassdirections type="list">[CompassNW];[CompassN];[CompassNE];[CompassW];[CompassOut];[CompassE];[CompassSW];[CompassS];[CompassSE];[CompassUp];[CompassDown]</compassdirections>
    <useframe type="boolean">false</useframe>
    <clearframe type="boolean">false</clearframe>
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="list">[AllObjects]</allobjects>
  </type>

  <type name="defaultobject">
    <displayverbs type="list">[LookAt];[Take]</displayverbs>
    <inventoryverbs type="list">[LookAt];[Use];[Drop]</inventoryverbs>
    <take type="boolean">false</take>
    <drop/>
    <gender>[NeutralGender]</gender>
    <article>[NeutralArticle]</article>
    <isopen type="boolean">false</isopen>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <container type="boolean">false</container>
    <descprefix>[YouAreIn]</descprefix>
    <objectslistprefix>[SeeListHeader]</objectslistprefix>
    <exitslistprefix>[GoListHeader]</exitslistprefix>
    <contentsprefix>[ContainerContentsPrefix]</contentsprefix>
    <description type="string"></description>
    <scenery type="boolean">false</scenery>
    <hidechildren type="boolean">false</hidechildren>
    <listchildren type="boolean">false</listchildren>
    <usedefaultprefix/>
  </type>

  <type name="defaultexit">
    <displayverbs type="list">[GoTo]</displayverbs>
    <locked type="boolean">false</locked>
    <lockmessage>[LockedExit]</lockmessage>
  </type>

  <type name="direction">
    <displayverbs type="list">[Go]</displayverbs>
  </type>

  <type name="compassdirection">
    <inherit name="direction"/>
    <prefix type="string">[CompassDirectionPrefix]</prefix>
  </type>

  <type name="updowndirection">
    <inherit name="direction"/>
    <prefix type="string">[UpDownDirectionPrefix]</prefix>
  </type>

  <type name="inoutdirection">
    <inherit name="direction"/>
    <prefix type="string">[InOutDirectionPrefix]</prefix>
  </type>

  <type name="defaultcommand">
    <pattern type="simplepattern"></pattern>
  </type>

  <type name="male">
    <displayverbs type="list">[LookAt];[SpeakTo]</displayverbs>
    <gender>[MaleGender]</gender>
    <article>[MaleArticle]</article>
  </type>

  <type name="female">
    <displayverbs type="list">[LookAt];[SpeakTo]</displayverbs>
    <gender>[FemaleGender]</gender>
    <article>[FemaleArticle]</article>
  </type>

  <type name="plural">
    <gender>[NeutralPluralGender]</gender>
    <article>[NeutralPluralArticle]</article>
  </type>

  <type name="maleplural">
    <displayverbs type="list">[LookAt];[SpeakTo]</displayverbs>
    <gender>[MalePluralGender]</gender>
    <article>[MalePluralArticle]</article>
  </type>

  <type name="femaleplural">
    <displayverbs type="list">[LookAt];[SpeakTo]</displayverbs>
    <gender>[FemalePluralGender]</gender>
    <article>[FemalePluralArticle]</article>
  </type>

  <type name="openable">
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <open/>
    <close/>
  </type>

  <type name="container_base">
    <container/>
  </type>

  <type name="container_closed">
    <inherit name="container_base"/>
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <open/>
    <close/>
  </type>

  <type name="container_open">
    <inherit name="container_base"/>
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <isopen/>
    <open/>
    <close/>
  </type>

  <type name="surface">
    <inherit name="container_base"/>
    <isopen/>
    <transparent/>
    <contentsprefix>[SurfaceContentsPrefix]</contentsprefix>
  </type>

  <type name="container">
    <inherit name="container_open"/>
  </type>

  <type name="container_limited">
    <inherit name="container"/>
    <maxobjects type="int">1</maxobjects>
    <addscript type="AddScript">
      children = GetDirectChildren(this)
      if (listcount(children) >= this.maxobjects) {
        if (HasString(this, "containerfullmessage")) {
          msg (this.containerfullmessage)
        }
        else {
          msg (DynamicTemplate("ContainerFull", this))
        }
      }
      else {
        object.parent = this
        msg (Template("Done"))
      }
    </addscript>
  </type>

  <type name="container_lockable">
    <openscript type="script">
      if (this.locked) {
        if (this.autounlock and ListContains(ScopeInventory(), this.key)) {
          do (this, "unlock")
          if (not this.isopen) {
            OpenObject (this)
          }
        }
        else {
          msg (DynamicTemplate("LockedObject", this))
        }
      }
      else {
        OpenObject (this)
      }
    </openscript>
    <closescript type="script">
      if (this.locked) {
        msg (DynamicTemplate("LockedObject", this))
      }
      else {
        CloseObject (this)
      }
    </closescript>
    <lock type="script">
      if (this.locked) {
        msg (DynamicTemplate("AlreadyLocked", this))
      }
      else if (this.isopen and not this.canlockopen) {
        msg (DynamicTemplate("CannotLockOpen", this))
      }
      else {
        if (ListContains(ScopeInventory(), this.key)) {
          msg (this.lockmessage)
          this.locked = true
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </lock>
    <unlock type="script">
      if (not this.locked) {
        msg (DynamicTemplate("AlreadyUnlocked", this))
      }
      else {
        if (ListContains(ScopeInventory(), this.key)) {
          msg (this.unlockmessage)
          this.locked = false
          if (this.autoopen and not this.isopen) {
            TryOpenClose (true, this)
          }
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </unlock>
    <locked/>
    <nokeymessage>[NoKey]</nokeymessage>
    <unlockmessage>[UnlockMessage]</unlockmessage>
    <lockmessage>[LockMessage]</lockmessage>
    <canlockopen type="boolean">false</canlockopen>
    <autoopen/>
    <autounlock/>
  </type>

  <type name="defaultplayer">
    <alias>[SelfAlias]</alias>
    <alt type="list">[SelfAlt]</alt>
    <scenery/>
    <look>[DefaultSelfDescription]</look>
    <gender>[SelfGender]</gender>
    <article>[SelfArticle]</article>
    <changedparent type="script">OnEnterRoom</changedparent>
  </type>

  <type name="switchable">
    <displayverbs type="listextend">[SwitchOn];[SwitchOff]</displayverbs>
    <switchedon type="boolean">false</switchedon>
    <turnon type="script">
      if (this.switchedon) {
        msg (DynamicTemplate("AlreadySwitchedOn", this))
      }
      else {
        this.switchedon = true
        if (HasString(this, "switchonmsg")) {
          msg (this.switchonmsg)
        }
        else {
          msg (DynamicTemplate("SwitchedOn", this))
        }
      }
    </turnon>
    <turnoff type="script">
      if (not this.switchedon) {
        msg (DynamicTemplate("AlreadySwitchedOff", this))
      }
      else {
        this.switchedon = false
        if (HasString(this, "switchoffmsg")) {
          msg (this.switchoffmsg)
        }
        else {
          msg (DynamicTemplate("SwitchedOff", this))
        }
      }
    </turnoff>
  </type>

</library>
