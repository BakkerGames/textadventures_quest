<library>
  <type name="defaultgame">
    <enablehyperlinks/>
    <showdescriptiononenter/>
    <autodescription/>
    <defaultfont>Arial</defaultfont>
    <defaultfontsize type="int">9</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <menufont>Arial</menufont>
    <menufontsize type="int">9</menufontsize>
    <menubackground>White</menubackground>
    <menuforeground>Black</menuforeground>
    <menuhoverbackground>LightGrey</menuhoverbackground>
    <menuhoverforeground>Black</menuhoverforeground>
    <underlinehyperlinks/>
    <compassdirections type="list">[CompassNW];[CompassN];[CompassNE];[CompassW];[CompassE];[CompassSW];[CompassS];[CompassSE];[CompassUp];[CompassDown];[CompassIn];[CompassOut]</compassdirections>
    <clearframe type="boolean">true</clearframe>
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="list">[AllObjects]</allobjects>
    <parserignoreprefixes type="list">[ParserIgnorePrefixes]</parserignoreprefixes>
    <displayroomdescriptiononstart type="boolean">true</displayroomdescriptiononstart>
    <showpanes/>
    <showscore type="boolean">false</showscore>
    <showhealth type="boolean">false</showhealth>
    <autodescription_youarein type="int">1</autodescription_youarein>
    <autodescription_youcansee type="int">2</autodescription_youcansee>
    <autodescription_youcango type="int">3</autodescription_youcango>
    <autodescription_description type="int">4</autodescription_description>
  </type>

  <type name="defaultobject">
    <displayverbs type="list">[LookAt];[Take]</displayverbs>
    <inventoryverbs type="list">[LookAt];[Use];[Drop]</inventoryverbs>
    <take type="boolean">false</take>
    <drop/>
    <gender>[NeutralGender]</gender>
    <article>[NeutralArticle]</article>
    <isopen type="boolean">false</isopen>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <container type="boolean">false</container>
    <descprefix>[YouAreIn]</descprefix>
    <objectslistprefix>[SeeListHeader]</objectslistprefix>
    <exitslistprefix>[GoListHeader]</exitslistprefix>
    <contentsprefix>[ContainerContentsPrefix]</contentsprefix>
    <description type="string"></description>
    <scenery type="boolean">false</scenery>
    <hidechildren type="boolean">false</hidechildren>
    <listchildren type="boolean">false</listchildren>
    <usedefaultprefix/>
    <changedisopen type="script">
      if (this.isopen and HasScript(this, "onopen")) {
        do (this, "onopen")
      }
      if (not this.isopen and HasScript(this, "onclose")) {
        do (this, "onclose")
      }
    </changedisopen>
    <changedlocked type="script">
      if (this.locked and HasScript(this, "onlock")) {
        do (this, "onlock")
      }
      if (not this.locked and HasScript(this, "onunlock")) {
        do (this, "onunlock")
      }
    </changedlocked>
    <changedswitchedon type="script">
      if (this.switchedon and HasScript(this, "onswitchon")) {
        do (this, "onswitchon")
      }
      if (not this.switchedon and HasScript(this, "onswitchoff")) {
        do (this, "onswitchoff")
      }      
    </changedswitchedon>
    <volume type="int">0</volume>
  </type>

  <type name="defaultexit">
    <displayverbs type="list">[GoTo]</displayverbs>
    <locked type="boolean">false</locked>
    <lockmessage>[LockedExit]</lockmessage>
    <lookonly type="boolean">false</lookonly>
  </type>

  <type name="direction">
    <displayverbs type="list">[Go]</displayverbs>
  </type>

  <type name="compassdirection">
    <inherit name="direction"/>
    <prefix type="string">[CompassDirectionPrefix]</prefix>
    <suffix type="string">[CompassDirectionSuffix]</suffix>
  </type>

  <type name="updowndirection">
    <inherit name="direction"/>
    <prefix type="string">[UpDownDirectionPrefix]</prefix>
    <suffix type="string">[UpDownDirectionSuffix]</suffix>
  </type>

  <type name="inoutdirection">
    <inherit name="direction"/>
    <prefix type="string">[InOutDirectionPrefix]</prefix>
    <suffix type="string">[InOutDirectionSuffix]</suffix>
  </type>

  <type name="northwestdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassNW]</alias>
    <alt type="list">[CompassNWShort]</alt>
  </type>

  <type name="northdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassN]</alias>
    <alt type="list">[CompassNShort]</alt>
  </type>

  <type name="northeastdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassNE]</alias>
    <alt type="list">[CompassNEShort]</alt>
  </type>

  <type name="westdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassW]</alias>
    <alt type="list">[CompassWShort]</alt>
  </type>

  <type name="eastdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassE]</alias>
    <alt type="list">[CompassEShort]</alt>
  </type>

  <type name="southwestdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassSW]</alias>
    <alt type="list">[CompassSWShort]</alt>
  </type>

  <type name="southdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassS]</alias>
    <alt type="list">[CompassSShort]</alt>
  </type>

  <type name="southeastdirection">
    <inherit name="compassdirection"/>
    <alias>[CompassSE]</alias>
    <alt type="list">[CompassSEShort]</alt>
  </type>

  <type name="updirection">
    <inherit name="updowndirection"/>
    <alias>[CompassUp]</alias>
    <alt type="list">[CompassUpShort]</alt>
  </type>

  <type name="downdirection">
    <inherit name="updowndirection"/>
    <alias>[CompassDown]</alias>
    <alt type="list">[CompassDownShort]</alt>
  </type>

  <type name="indirection">
    <inherit name="inoutdirection"/>
    <alias>[CompassIn]</alias>
    <alt type="list">[CompassInShort]</alt>
  </type>

  <type name="outdirection">
    <inherit name="inoutdirection"/>
    <alias>[CompassOut]</alias>
    <alt type="list">[CompassOutShort]</alt>
  </type>

  <type name="defaultcommand">
    <pattern type="simplepattern"></pattern>
  </type>

  <type name="male">
    <displayverbs type="list">[LookAt];[SpeakTo]</displayverbs>
    <gender>[MaleGender]</gender>
    <article>[MaleArticle]</article>
  </type>

  <type name="female">
    <displayverbs type="list">[LookAt];[SpeakTo]</displayverbs>
    <gender>[FemaleGender]</gender>
    <article>[FemaleArticle]</article>
  </type>

  <type name="plural">
    <gender>[NeutralPluralGender]</gender>
    <article>[NeutralPluralArticle]</article>
  </type>

  <type name="maleplural">
    <displayverbs type="list">[LookAt];[SpeakTo]</displayverbs>
    <gender>[MalePluralGender]</gender>
    <article>[MalePluralArticle]</article>
  </type>

  <type name="femaleplural">
    <displayverbs type="list">[LookAt];[SpeakTo]</displayverbs>
    <gender>[FemalePluralGender]</gender>
    <article>[FemalePluralArticle]</article>
  </type>

  <type name="openable">
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <open/>
    <close/>
  </type>

  <type name="container_base">
    <container/>
  </type>

  <type name="container_closed">
    <inherit name="container_base"/>
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <open/>
    <close/>
  </type>

  <type name="container_open">
    <inherit name="container_base"/>
    <displayverbs type="listextend">[Open];[Close]</displayverbs>
    <isopen/>
    <open/>
    <close/>
  </type>

  <type name="surface">
    <inherit name="container_base"/>
    <isopen/>
    <transparent/>
    <contentsprefix>[SurfaceContentsPrefix]</contentsprefix>
  </type>

  <type name="container">
    <inherit name="container_open"/>
  </type>

  <type name="container_limited">
    <inherit name="container"/>
    <maxobjects type="int">1</maxobjects>
    <maxvolume type="int">100</maxvolume>
    <addscript type="AddScript">
      activecontainer = this
      correct = true
      while (DoesInherit(activecontainer, "container_base")) {
        if (HasInt(activecontainer, "maxvolume")) {
          if (GetVolume(object, true) + GetVolume(activecontainer, false) > activecontainer.maxvolume) {
            correct = false
            if (HasString(this, "containerfullmessage")) {
              message = this.containerfullmessage
            }
            else {
              message = DynamicTemplate("ContainerFull", this)
            }
          }
        }
        activecontainer = activecontainer.parent
      }
    
      children = GetDirectChildren(this)
      if (listcount(children) >= this.maxobjects) {
        correct = false
        if (HasString(this, "containerfullmessage")) {
          message = this.containerfullmessage
        }
        else {
          message=DynamicTemplate("MaxObjectsInContainer", this)
        }
      }
    
      if (correct = false) {
        msg (message)
      }
      else {
        object.parent = this
        msg (Template("Done"))
      }
    </addscript>
  </type>
  
  <type name="container_lockable">
    <openscript type="script">
      if (this.locked) {
        if (this.autounlock and ListContains(ScopeInventory(), this.key)) {
          do (this, "unlock")
          if (not this.isopen) {
            OpenObject (this)
          }
        }
        else {
          msg (DynamicTemplate("LockedObject", this))
        }
      }
      else {
        OpenObject (this)
      }
    </openscript>
    <closescript type="script">
      if (this.locked) {
        msg (DynamicTemplate("LockedObject", this))
      }
      else {
        CloseObject (this)
      }
    </closescript>
    <lock type="script">
      if (this.locked) {
        msg (DynamicTemplate("AlreadyLocked", this))
      }
      else if (this.isopen and not this.canlockopen) {
        msg (DynamicTemplate("CannotLockOpen", this))
      }
      else {
        if (ListContains(ScopeInventory(), this.key)) {
          msg (this.lockmessage)
          this.locked = true
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </lock>
    <unlock type="script">
      if (not this.locked) {
        msg (DynamicTemplate("AlreadyUnlocked", this))
      }
      else {
        if (ListContains(ScopeInventory(), this.key)) {
          msg (this.unlockmessage)
          this.locked = false
          if (this.autoopen and not this.isopen) {
            TryOpenClose (true, this)
          }
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </unlock>
    <locked/>
    <nokeymessage>[NoKey]</nokeymessage>
    <unlockmessage>[UnlockMessage]</unlockmessage>
    <lockmessage>[LockMessage]</lockmessage>
    <canlockopen type="boolean">false</canlockopen>
    <autoopen/>
    <autounlock/>
  </type>

  <type name="defaultplayer">
    <alias>[SelfAlias]</alias>
    <alt type="list">[SelfAlt]</alt>
    <scenery/>
    <look>[DefaultSelfDescription]</look>
    <gender>[SelfGender]</gender>
    <article>[SelfArticle]</article>
    <maxvolume type="int">100</maxvolume>
    <changedparent type="script">
      if (IsDefined("oldvalue")) {
        OnEnterRoom(oldvalue)
      }
      else {
        OnEnterRoom(null)
      }
    </changedparent>
  </type>

  <type name="switchable">
    <displayverbs type="listextend">[SwitchOn];[SwitchOff]</displayverbs>
    <switchedon type="boolean">false</switchedon>
    <turnon type="script">
      if (this.switchedon) {
        msg (DynamicTemplate("AlreadySwitchedOn", this))
      }
      else {
        if (HasString(this, "switchonmsg")) {
          msg (this.switchonmsg)
        }
        else {
          msg (DynamicTemplate("SwitchedOn", this))
        }
        this.switchedon = true
      }
    </turnon>
    <turnoff type="script">
      if (not this.switchedon) {
        msg (DynamicTemplate("AlreadySwitchedOff", this))
      }
      else {
        if (HasString(this, "switchoffmsg")) {
          msg (this.switchoffmsg)
        }
        else {
          msg (DynamicTemplate("SwitchedOff", this))
        }
        this.switchedon = false
      }
    </turnoff>
  </type>

  <type name="edible">
    <displayverbs type="listextend">[Eat]</displayverbs>
    <eat type="script">
      if (HasString(this, "eatmsg")) {
        msg (this.eatmsg)
      }
      else {
        msg (DynamicTemplate("Eaten", this))
      }
      if (HasInt(player, "health")) {
        player.health = player.health + this.eathealth
      }
      destroy (this.name)
    </eat>
    <eathealth type="int">0</eathealth>
  </type>

</library>
