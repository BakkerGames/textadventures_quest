<library>
  <function name="GetPlacesObjectsList" type="objectlist">
    return (ListExclude(ScopeVisibleNotHeldNotScenery(), player))
  </function>
  
  <function name="ScopeInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, AllObjects()) {
      if (ContainsVisible(player, obj)) {
        list add(result, obj)
      }
    }
    return (result)
  </function>

  <function name="ScopeReachableInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, AllObjects()) {
      if (ContainsReachable(player, obj)) {
        list add(result, obj)
      }
    }
    return (result)
  </function>
  
  <function name="ScopeVisibleNotHeld" type="objectlist">
    return (ScopeVisibleNotHeldForRoom(player.parent))
  </function>
  
  <function name="ScopeVisibleNotHeldForRoom" type="objectlist" parameters="room">
    if (room = player.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room))
      list add (result, player)
      return (result)
    } else {
      return (ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room)))
    }
  </function>
  
  <function name="ScopeVisibleNotHeldNotScenery" type="objectlist">
    return (ScopeVisibleNotHeldNotSceneryForRoom(player.parent))
  </function>
  
  <function name="ScopeVisibleNotHeldNotSceneryForRoom" type="objectlist" parameters="room">
    return (RemoveSceneryObjects(ScopeVisibleNotHeldForRoom(room)))
  </function>
  
  <function name="ScopeReachable" type="objectlist">
    return (ScopeReachableForRoom(player.parent))
  </function>

  <function name="ScopeReachableForRoom" type="objectlist" parameters="room">
    if (room = player.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeReachableInventory())
      list add(result, player)
    } else {
      result = ScopeReachableNotHeldForRoom(room)
    }  
    return (result)
  </function>
  
  <function name="ScopeVisibleNotReachable" type="objectlist">
    return (ScopeVisibleNotReachableForRoom(player.parent))
  </function>
  
  <function name="ScopeVisibleNotReachableForRoom" type="objectlist" parameters="room">
    result = NewObjectList()
    exclude = ScopeReachableForRoom(room)
    list add(exclude, player)
    newParent = GetNonTransparentParent(room)
    foreach (obj, AllObjects()) {
      if (ContainsVisible(newParent, obj) and not ListContains(exclude, obj)) {
        list add(result, obj)
      }
    }    
    return (result)
  </function>
  
  <function name="GetNonTransparentParent" type="object" parameters="room">
    if (GetBoolean(room, "transparent")) {
      if (room.parent = null) {
        return (room)
      }
      else {
        return (GetNonTransparentParent(room.parent))
      }
    }
    else {
      return (room)
    }
  </function>

  <function name="ScopeReachableNotHeld" type="objectlist">    
    return (ScopeReachableNotHeldForRoom(player.parent))
  </function>
  
  <function name="ScopeReachableNotHeldForRoom" type="objectlist" parameters="room">    
  <![CDATA[
    result = NewObjectList()
    foreach (obj, AllObjects()) {
      if (ContainsReachable(room, obj) and obj <> player and not Contains(player, obj)) {
        list add(result, obj)
      }
    }
    return (result)
  ]]>
  </function>

  <function name="ScopeVisible" type="objectlist">
    return (ScopeVisibleForRoom(player.parent))
  </function>
  
  <function name="ScopeVisibleForRoom" type="objectlist" parameters="room">
    if (room = player.parent) {
      return (ListCombine(ScopeVisibleNotHeldForRoom(room), ScopeInventory()))
    } else {
      return (ScopeVisibleNotHeldForRoom(room))
    }  
  </function>

  <function name="ScopeExits" type="objectlist">
    return (ScopeExitsForRoom(player.parent))
  </function>
  
  <function name="ScopeExitsForRoom" type="objectlist" parameters="room">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room and not GetBoolean(exit, "lookonly")) {
        list add(result, exit)
      }
    }
    return (result)
  </function>

  <function name="ScopeExitsAll" type="objectlist">
    return (ScopeAllExitsForRoom(player.parent))
  </function>

  <function name="ScopeAllExitsForRoom" type="objectlist" parameters="room">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        list add(result, exit)
      }
    }
    return (result)
  </function>
  
  <function name="ScopeCommands" type="objectlist">
    result = NewObjectList()
    foreach (command, AllCommands()) {
      if (command.parent = null or command.parent = player.parent) {
        list add(result, command)
      }
    }
    return (result)
  </function>

  <function name="GetBlockingObject" type="object" parameters="obj">
    result = null
    foreach (obj, ListParents(obj)) {
      if (result = null and not CanReachThrough(obj)) {
        result = obj
      }
    }
    return (result)
  </function>

  <function name="ListParents" type="objectlist" parameters="obj">
    <![CDATA[
    result = NewObjectList()
    if (obj.parent <> null) {
      parent_as_list = NewObjectList()
      list add (parent_as_list, obj.parent)
      result = ListCombine(parent_as_list, ListParents(obj.parent))
    }
    return (result)
    ]]>
  </function>
  
  <function name="ContainsVisible" type="boolean" parameters="parentObj, searchObj">
    return (ContainsAccessible(parentObj, searchObj, false))
  </function>

  <function name="ContainsReachable" type="boolean" parameters="parentObj, searchObj">
    return (ContainsAccessible(parentObj, searchObj, true))
  </function>

  <function name="ContainsAccessible" type="boolean" parameters="parentObj, searchObj, onlyReachable">
    if (not HasObject(searchObj, "parent")) {
      return (false)
    }
    else {
      if (searchObj.parent = null) {
        return (false)
      }
      else if (searchObj.parent = parentObj) {
        return (true)
      } else {
        if (onlyReachable) {
          canAdd = CanReachThrough(searchObj.parent)
        }
        else {
          canAdd = CanSeeThrough(searchObj.parent)
        }
        
        if (canAdd) {
          return (ContainsAccessible(parentObj, searchObj.parent, onlyReachable))
        } else {
          return (false)
        }
      }
    }
  </function>

  <function name="CanSeeThrough" type="boolean" parameters="obj">
    return (GetBoolean(obj, "transparent") or CanReachThrough(obj))
  </function>

  <function name="CanReachThrough" type="boolean" parameters="obj">
    return (GetBoolean(obj, "isopen") and not GetBoolean(obj, "hidechildren"))
  </function>

  <function name="Got" type="boolean" parameters="obj">
    return (ListContains(ScopeInventory(), obj))
  </function>
  
</library>