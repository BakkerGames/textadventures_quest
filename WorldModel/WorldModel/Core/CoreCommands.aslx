<library>

  <command name="lookat" template="lookat">
    if (GetBoolean(object, "hidechildren")) {
      object.hidechildren = false
    }
    
    if (TypeOf(object, "look") = "script") {
      do (object, "look")
    }
    else {
      lookdesc = ""
      if (HasString(object, "look")) {
        lookdesc = object.look
      }
      
      if (LengthOf(lookdesc) = 0) {
        lookdesc = Template("DefaultObjectDescription")
      }
      
      if (GetBoolean(object, "switchedon")) {
        if (HasString(object, "switchedondesc")) {
          lookdesc = lookdesc + " " + object.switchedondesc
        }
      }
      else {
        if (HasString(object, "switchedoffdesc")) {
          lookdesc = lookdesc + " " + object.switchedoffdesc
        }
      }

      msg (lookdesc)
    }
    
    ListObjectContents (object)
  </command>

  <function name="ListObjectContents" parameters="object">
    <![CDATA[
    if (GetBoolean(object, "isopen") and GetBoolean(object, "listchildren")) {
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (HasString(object, "listchildrenprefix")) {
        listprefix = object.listchildrenprefix
      }
      else {
        listprefix = DynamicTemplate("ObjectContains", object)
      }
      list = FormatObjectList(listprefix, object, Template("And"), ".", false)
      if (list <> "") {
        msg (list)
      }
    }
    ]]>
  </function>

  <command name="take" template="take">
    <multiple>
      return (ScopeVisibleNotHeld() - player)
    </multiple>
    <script>
      foreach (obj, object) {
        DoTake(obj, multiple)
      }
    </script>
  </command>

  <function name="DoTake" parameters="object, ismultiple">
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    
    if (ListContains(ScopeInventory(), object)) {
      msg (prefix + DynamicTemplate("AlreadyTaken", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = true
      takemsg = object.takemsg
      
      switch (TypeOf(object, "take")) {
        case ("script") {
          if (ismultiple) {
            msg (prefix)
          }
          do (object, "take")
          takemsg = ""
        }
        case ("boolean") {
          if (object.take = true) {
            object.parent = player
            if (takemsg = null) {
              takemsg = DynamicTemplate("TakeSuccessful", object)
            }
          }
          else {
            found = false
          }
        }
        case ("string") {
          object.parent = player
          takemsg = object.take
        }
        default {
          found = false
        }
      }
      
      if (not found and takemsg = null) takemsg = DynamicTemplate("TakeUnsuccessful", object)
      
      if (LengthOf(takemsg) > 0) {
        msg (prefix + takemsg)
      }
    }
  </function>

  <command name="drop" template="drop">
    <multiple>
      return (ScopeInventory())
    </multiple>
    <script>
      foreach (obj, object) {
        DoDrop(obj, multiple)
      }
    </script>
  </command>

  <function name="DoDrop" parameters="object, ismultiple">
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }

    if (not ListContains(ScopeInventory(), object)) {
      msg (prefix + DynamicTemplate("NotCarrying", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = true
      dropmsg = object.dropmsg
      
      switch (TypeOf(object, "drop")) {
        case ("script") {
          if (ismultiple) {
            msg (prefix)
          }
          do (object, "drop")
          dropmsg = ""
        }
        case ("boolean") {
          if (object.drop = true) {
            object.parent = player.parent
            if (dropmsg = null) {
              dropmsg = DynamicTemplate("DropSuccessful", object)
            }
          }
          else {
            found = false
          }
        }
        case ("string") {
          object.parent = player.parent
          dropmsg = object.drop
        }
        default {
          found = false
        }
      }
      
      if (not found and dropmsg = null) dropmsg = DynamicTemplate("DropUnsuccessful", object)
      
      if (LengthOf(dropmsg) > 0) {
        msg (prefix + dropmsg)
      }
    }
  </function>
  
  <command name="use" template="use">
    if (HasScript(object, "use")) {
      do (object, "use")
    }
    else {
      msg (DynamicTemplate("CantUse", object))
    }
  </command>
  
  <command name="undo">
    <pattern type="string">[undo]</pattern>
    <script>undo</script>
    <isundo/>
  </command>
  
  <command name="inventory" pattern="[inventory]">
    list = FormatObjectList(Template("CarryingListHeader"), player, Template("And"), ".", true)
    if (list = "") {
      msg (Template("NotCarryingAnything"))
    }
    else {
      msg (list)
    }
  </command>
  <command name="look" pattern="[look]">
    ShowRoomDescription
  </command>

  <command name="lookdir" pattern="[lookdir]">
   <![CDATA[
    if (HasScript(exit, "look")) {
        do (exit, "look")
    }
    else {
      message = DynamicTemplate("YouLooking",exit.alias)
      if (HasString(exit, "look")){
        if (exit.look <> "") {
          message = exit.look
        }
      }
      if (exit.locked) {
        if (HasString(exit,"lockmessage")) {
          lockmessage = exit.lockmessage
        }
        else {
          lockmessage = Template("LockedExit")
        }
        msg (message+" "+lockmessage)
      } 
      else {
        msg (message)
      }
    }
   ]]>
  </command>

  <command name="quit" pattern="[quit]">
    request (Quit, "")
  </command>
  <command name="go" pattern="[go]" unresolved="[UnresolvedLocation]">
    if (exit.locked) {
      msg (exit.lockmessage)
    }
    else if (HasScript(exit, "script")) {
      do (exit, "script")
    }
    else {
      if (exit.lookonly) {
         msg ("[UnresolvedLocation]")
      } 
      else {
        player.parent = exit.to
      }
    }
  </command>

  <function name="TryOpenClose" parameters="open, object">
    if (open) {
      action = "open"
      scriptaction = "openscript"
    }
    else {
      action = "close"
      scriptaction = "closescript"
    }

    if (not ListContains(ScopeReachable(), object)) {
      msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = false
      
      if (GetBoolean(object, action)) {
        if (open) {
          if (object.isopen) {
            msg (DynamicTemplate("AlreadyOpen", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              OpenObject (object)
            }
          }
        }
        else {
          if (not object.isopen) {
            msg (DynamicTemplate("AlreadyClosed", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              CloseObject (object)
            }
          }
        }
      }
      else {
        if (open) {
          msg (DynamicTemplate("CantOpen", object))
        }
        else {
          msg (DynamicTemplate("CantClose", object))
        }
      }
    }
  </function>

  <function name="OpenObject" parameters="object">
    object.isopen = true
    msg (DynamicTemplate("OpenSuccessful", object))
    ListObjectContents (object)
  </function>

  <function name="CloseObject" parameters="object">
    object.isopen = false
    msg (DynamicTemplate("CloseSuccessful", object))
  </function>

  <command name="open" template="open">
    TryOpenClose(true, object)
  </command>

  <command name="close" template="close">
    TryOpenClose(false, object)
  </command>

  <command name="put" pattern="[put]">
    // put object1 in/on object 2
    
    if (Contains(object2, object1)) {
      msg (DynamicTemplate("AlreadyThere", object1))
    }
    // must be carrying object1
    else if (not ListContains(ScopeInventory(), object1)) {
      msg (DynamicTemplate("NotCarrying", object1))
    }
    // object1 must not be inside a closed container
    else if (not ListContains(ScopeReachable(), object1)) {
      msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object1)))
    }
    // object2 must not be inside a closed container
    else if (not ListContains(ScopeReachable(), object2)) {
      msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object2)))
    }
    // object2 must be an open container or surface
    else if (not object2.container) {
      msg (Template("CannotDoThat"))
    }
    else if (not object2.isopen) {
      msg (DynamicTemplate("ObjectNotOpen", object2))
    }
    else {
      if (HasDelegateImplementation(object2, "addscript")) {
        rundelegate (object2, "addscript", object1)
      }
      else {
        object1.parent = object2
        msg (Template("Done"))
      }
    }
    
  </command>

  <command name="give" pattern="[give]">
    handled = false
    if (HasString(object2, "give")) {
      msg (object2.give)
      handled = true
    }
    else if (typeof(object2, "give") = "scriptdictionary") {
      if (DictionaryContains(object2.give, object1.name)) {
        invoke (ScriptDictionaryItem(object2.give, object1.name))
        handled = true
      }
    }
    
    if (not handled) {
      msg (DynamicTemplate("DefaultGive", object2, object1))
    }
  </command>
  
  <command name="useon" pattern="[useon]">
    handled = false
    if (HasString(object2, "useon")) {
      msg (object2.useon)
      handled = true
    }
    else if (typeof(object2, "useon") = "scriptdictionary") {
      if (DictionaryContains(object2.useon, object1.name)) {
        invoke (ScriptDictionaryItem(object2.useon, object1.name))
        handled = true
      }
    }
    
    if (not handled) {
      msg (DynamicTemplate("DefaultUseOn", object2, object1))
    }
  </command>

  <command name="ask" pattern="[ask]">
    DoAskTell (object, text, "ask", "askdefault", "DefaultAsk")
  </command>

  <command name="tell" pattern="[tell]">
    DoAskTell (object, text, "tell", "telldefault", "DefaultTell")
  </command>

  <function name="DoAskTell" parameters="object, text, property, defaultscript, defaulttemplate">
    <![CDATA[
    handled = false
    
    maxstrength = 0
    match = null
    
    if (typeof(object, property) = "scriptdictionary") {
      dictionary = GetAttribute(object, property)
      foreach (keywords, dictionary) {
        if (GetKeywordsMatchStrength(keywords, text) > maxstrength) {
          match = ScriptDictionaryItem(dictionary, keywords)
        }
      }
      
      if (match <> null) {
        invoke (match)
        handled = true
      }
    }
    
    if (not handled) {
      if (HasScript(object, defaultscript)) {
        do (object, defaultscript)
      } else {
        msg (DynamicTemplate(defaulttemplate, object))
      }
    }
    ]]>    
  </function>

  <function name="GetKeywordsMatchStrength" parameters="keywords, input" type="int">
    // Keywords is the subject. We split it into individual words, and then see how well
    // the words in the input match the keywords.
    
    keywordlist = Split(keywords, " ")
    inputlist = Split(input, " ")
    
    strength = 0
    
    foreach (word, inputlist) {
      if (ListContains(keywordlist, word)) {
        strength = strength + LengthOf(word)
      }
    }
    
    return (strength)
  </function>

  <command name="oops" pattern="[oops]">
    <isoops/>
    <script><![CDATA[
      hasoops = false
      if (HasAttribute(game, "unresolvedcommand")) {
        if (game.unresolvedcommand <> null) {
          hasoops = true
        }
      }
      if (not hasoops) {
        msg (Template("DefaultOops"))
      }
      else {
        dictionary remove (game.unresolvedcommandvarlist, game.unresolvedcommandkey)
        dictionary add (game.unresolvedcommandvarlist, game.unresolvedcommandkey, text)
        HandleSingleCommandPattern ("", game.unresolvedcommand, game.unresolvedcommandvarlist)
      }
    ]]></script>
  </command>

  <!-- The object name for a verb defaults to the same thing as its property, unless we explictly specify a name,
       as we do here e.g. to prevent a clash with the "sit" command -->
  <verb template="speakto" property="speak" response="DefaultSpeakTo"/>
  <verb template="buy" property="buy" response="DefaultBuy"/>
  <verb template="climb" property="climb" response="DefaultClimb"/>
  <verb template="drink" property="drink" response="DefaultDrink"/>
  <verb template="eat" property="eat" response="DefaultEat"/>
  <verb template="hit" property="hit" response="DefaultHit"/>
  <verb template="kill" property="kill" response="DefaultKill"/>
  <verb template="kiss" property="kiss" response="DefaultKiss"/>
  <verb template="knock" property="knock" response="DefaultKnock"/>
  <verb template="lick" property="lick" response="DefaultLick"/>
  <verb name="lieon" template="lie" property="lie" response="DefaultLie"/>
  <verb name="listento" template="listento" property="listen" response="DefaultListenTo"/>
  <verb template="lock" property="lock" response="DefaultLock"/>
  <verb template="move" property="move" response="DefaultMove"/>
  <verb template="pull" property="pull" response="DefaultPull"/>
  <verb template="push" property="push" response="DefaultPush"/>
  <verb template="read" property="read" response="DefaultRead"/>
  <verb template="search" property="search" response="DefaultSearch"/>
  <verb name="siton" template="sit" property="sit" response="DefaultSit"/>
  <verb template="smell" property="smell" response="DefaultSmell"/>
  <verb template="taste" property="taste" response="DefaultTaste"/>
  <verb template="throw" property="throw" response="DefaultThrow"/>
  <verb template="tie" property="tie" response="DefaultThrow"/>
  <verb template="touch" property="touch" response="DefaultTouch"/>
  <verb template="turnon" property="turnon" response="DefaultTurnOn"/>
  <verb template="turnoff" property="turnoff" response="DefaultTurnOff"/>
  <verb template="turn" property="turn" response="DefaultTurn"/>
  <verb template="unlock" property="unlock" response="DefaultUnlock"/>
  <verb template="untie" property="untie" response="DefaultUntie"/>
  <verb template="wear" property="wear" response="DefaultWear"/>

  <command name="listen" pattern="[listen]">msg (Template("DefaultListen"))</command>
  <command name="jump" pattern="[jump]">msg (Template("DefaultJump"))</command>
  <command name="sit" pattern="[sitdown]">msg (Template("DefaultSitDown"))</command>
  <command name="lie" pattern="[liedown]">msg (Template("DefaultLieDown"))</command>
  <command name="sleep" pattern="[sleep]">msg (Template("DefaultSleep"))</command>
  <command name="wait" pattern="[wait]">msg (Template("DefaultWait"))</command>
  <command name="xyzzy" pattern="[xyzzy]">msg (Template("DefaultXyzzy"))</command>
  <command name="help" pattern="[help]">msg (Template("DefaultHelp"))</command>

</library>