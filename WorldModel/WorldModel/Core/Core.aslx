<library>

  <delegate name="AddScript" parameters="object"/>
  <delegate name="AssociatedScope" type="objectlist"/>
  <implied element="object" property="alt" type="simplestringlist"/>
  <implied element="command" property="pattern" type="simplepattern"/>
  <implied element="command" property="script" type="script"/>
  <implied element="command" property="multiple" type="AssociatedScope"/>
  <implied element="object" property="displayverbs" type="simplestringlist"/>
  <implied element="object" property="inventoryverbs" type="simplestringlist"/>
  <implied element="walkthrough" property="steps" type="simplestringlist"/>
  <implied element="timer" property="interval" type="int"/>
  <implied element="timer" property="script" type="script"/>
  <implied element="turnscript" property="script" type="script"/>

  <include ref="CoreCommands.aslx"/>
  <include ref="CoreParser.aslx"/>
  <include ref="CoreScopes.aslx"/>
  <include ref="CoreTypes.aslx"/>
  <include ref="CoreDescriptions.aslx"/>
  <include ref="CoreTimers.aslx"/>
  <include ref="CoreTurnScripts.aslx"/>
  <include ref="CoreStatusAttributes.aslx"/>
  <include ref="CoreOutput.aslx"/>
  <include ref="CoreGrid.aslx"/>
  <include ref="CoreCombat.aslx"/>
  <include ref="CoreEffects.aslx"/>
  <include ref="CoreEditor.aslx"/>
  <include ref="CoreAnnotation.aslx"/>
  <include ref="CoreWearable.aslx"/>

  <function name="InitInterface"><![CDATA[
    if (game.setcustomwidth) {
      JS.setGameWidth (game.customwidth)
    }
    if (game.setcustompadding) {
      JS.setGamePadding (game.custompaddingtop, game.custompaddingbottom, game.custompaddingleft, game.custompaddingright)
    }
    if (game.externalstylesheets <> null) {
      foreach (stylesheet, game.externalstylesheets) {
        JS.addExternalStylesheet (stylesheet)
      }
    }
    if (game.setbackgroundopacity) {
      SetBackgroundOpacity (game.backgroundopacity)
    }
    request (Background, game.defaultbackground)
    request (Foreground, game.defaultforeground)
    request (LinkForeground, game.defaultlinkforeground)
    if (LengthOf(game.backgroundimage) > 0) {
      SetBackgroundImage (game.backgroundimage)
    }
    request (SetCompassDirections, Join(game.compassdirections, ";"))
    request (SetInterfaceString, "InventoryLabel=Inventory")
    request (SetInterfaceString, "StatusLabel=Status")
    request (SetInterfaceString, "PlacesObjectsLabel=Places and Objects")
    request (SetInterfaceString, "CompassLabel=Compass")
    request (SetInterfaceString, "InButtonLabel=in")
    request (SetInterfaceString, "OutButtonLabel=out")
    request (SetInterfaceString, "EmptyListLabel=(empty)")
    request (SetInterfaceString, "NothingSelectedLabel=(nothing selected)")
    request (SetInterfaceString, "TypeHereLabel=Type here...")
    request (SetInterfaceString, "ContinueLabel=Continue...")
    JS.SetMenuBackground (game.menubackground)
    JS.SetMenuForeground (game.menuforeground)
    JS.SetMenuHoverBackground (game.menuhoverbackground)
    JS.SetMenuHoverForeground (game.menuhoverforeground)
    JS.SetMenuFontName (game.menufont)
    JS.SetMenuFontSize (game.menufontsize + "pt")
    if (not game.underlinehyperlinks) {
      JS.TurnOffHyperlinksUnderline ()
    }
    ResetCommandBarFormat
    if (game.showcommandbar) {
      request (Show, "Command")
    }
    else {
      request (Hide, "Command")
    }
    if (HasString(game, "panelcontents")) {
      SetFramePicture (game.panelcontents)
    }
    if (game.gridmap) {
      JS.ShowGrid (game.mapsize)
      Grid_SetScale (game.mapscale)
      if (game.pov <> null) {
        if (game.pov.parent <> null) {
          Grid_Redraw
          Grid_DrawPlayerInRoom (game.pov.parent)
        }
      }
    }
    // Added by the Pixie
    // Note that panesVisible in playercore.js must be updated too
    // Makes the panel under the panes transparent
    JS.eval ("$('#gamePanes').css('background', 'transparent')")
    // This line will get the save confirmation to appear in the right font and colour
    JS.setCss ("body", "color:" + game.defaultforeground + ";font-family:" + game.defaultfont + ";font-size:" + game.defaultfontsize + "pt;")
    // various new options
    if (HasString(game, "bordercolour")) {
      JS.eval ("$('#gameBorder').css('border-left', '1px solid " + game.bordercolour + "')")
      JS.eval ("$('#gameBorder').css('border-right', '1px solid " + game.bordercolour + "')")
    }
    if (not game.classiclocation) {
      JS.eval ("$('#status').css('background-image', 'none')")
      if (HasString(game, "customlocationcolour")) {
        JS.eval ("$('#status').css('background-color', '" + game.customlocationcolour + "')")
      }
      else {
        JS.eval ("$('#status').css('background', 'transparent')")
      }
      if (HasString(game, "customlocationtextcolour")) {
        JS.eval ("$('#status').css('color', '" + game.customlocationtextcolour + "')")
      }
      if (HasString(game, "customlocationbordercolour")) {
        JS.eval ("$('#status').css('border', '1px solid " + game.customlocationbordercolour + "')")
      }
      else {
        JS.eval ("$('#status').css('border', 'none')")
      }
    }
    request (Show, "Location")
    if (game.showlocation) {
      JS.eval ("$('#status').css('display', 'block')")
    }
    else {
      JS.eval ("$('#status').css('display', 'none')")
    }
    if (HasString(game, "marginscolour")) {
      JS.eval ("$('body').css('background-color', '" + game.marginscolour + "')")
    }
    if (game.turnoffsavebutton) {
      JS.eval ("$('#controlButtons').css('display', 'none')")
    }
    if (game.turnoffcompass) {
      JS.eval ("$('#compassLabel').css('display', 'none')")
      JS.eval ("$('#compassAccordion').css('display', 'none')")
    }
    if (game.turnoffinventory) {
      JS.eval ("$('#inventoryLabel').css('display', 'none')")
      JS.eval ("$('#inventoryAccordion').css('display', 'none')")
    }
    if (game.turnoffpeopleandobjects) {
      JS.eval ("$('#compassLabel').css('display', 'none')")
      JS.eval ("$('#compassAccordion').css('display', 'none')")
    }
    if (game.statusandcompassattop) {
      JS.eval ("$('#statusVarsLabel').insertBefore('#inventoryLabel')")
      JS.eval ("$('#statusVarsAccordion').insertBefore('#inventoryLabel')")
      JS.eval ("$('#compassLabel').insertBefore('#inventoryLabel')")
      JS.eval ("$('#compassAccordion').insertBefore('#inventoryLabel')")
    }
    if (game.showpanes and game.commandpane) {
      JS.eval ("$('#compassLabel').before('<div id=\"commandPane\" class=\"ui-helper-reset ui-widget ui-state-active ui-accordion-header ui-accordion\" style=\"border-radius: 5px;text-align:center;\"><h3>Commands</h3></div>');")
    }
    if (game.colourblend) {
      JS.colourBlend (game.colourblendtop, game.colourblendbottom)
    }
    if (game.borderlesscursor) {
      if (HasString(game, "commandcursor")) {
        cursor = game.commandcursor
      }
      else {
        cursor = "&gt;"
      }
      JS.addText ("<style>#txtCommand { outline:none; border:none; margin:0; padding:0; width:100 px;}</style>")
      JS.eval ("$('#txtCommandDiv').prepend('<span id=\"txtCommandPrompt\" style=\"color:" + game.defaultforeground + ";\">" + cursor + "</span>')")
      request (SetInterfaceString, "TypeHereLabel=")
    }
    else if (game.shadowbox) {
      JS.addText ("<style>#txtCommand { outline:none; border:none; margin:2px; padding:7px; width:100 px;box-shadow: 0px 0px 15px 5px #888;}</style>")
    }
    if (game.panestheme = "Midnight") {
      JS.setPanes ("white", "midnightblue", "midnightblue", "skyblue")
    }
    if (game.panestheme = "Nature") {
      JS.setPanes ("#A1C935", "#254117", "#306754", "#A1C935", "green")
    }
    if (game.panestheme = "Parchment") {
      JS.setPanes ("#493D26", "#FAEBD7", "#FAEBD7", "#493D26", "#C88141")
    }
    if (game.panestheme = "Vanilla") {
      JS.setPanes ("black", "white")
    }
    if (game.panestheme = "Black") {
      JS.setPanes ("orange", "black", "black", "orange")
    }
    if (game.panestheme = "Blood") {
      JS.setPanes ("orange", "#800000", "#800000", "orange", "yellow")
    }
    if (game.panestheme = "Tranquil") {
      JS.setPanes ("midnightblue", "skyblue", "white", "midnightblue", "blue")
    }
    //
    // -----------------------------------------------------------------------
    // This is in the original, but must come last
    if (not game.showborder) {
      JS.hideBorder ()
    }
    if (game.showpanes) {
      request (Show, "Panes")
    }
    else {
      request (Hide, "Panes")
    }
    InitUserInterface
  ]]></function>

  <function name="InitUserInterface">
  </function>
  
  <function name="StartGame">
    <![CDATA[
    StartTurnOutputSection
    if (game.showtitle) {
      JS.StartOutputSection ("title")
      PrintCentered ("<span style=\"font-size:260%\">" + game.gamename + "</span>")
      if (game.subtitle <> null) {
        if (LengthOf(game.subtitle) > 0) {
          PrintCentered ("<span style=\"font-size:130%\">" + game.subtitle + "</span>")
        }
      }
      if (game.author <> null) {
        if (LengthOf(game.author) > 0) {
          PrintCentered ("<br/><span style=\"font-size:140%\">[By] " + game.author + "</span>")
        }
      }
      msg ("<div style=\"margin-top:20px\"></div>")
      JS.EndOutputSection ("title")
    }
    if (game.pov = null) {
      playerObject = GetObject("player")
      if (playerObject = null) {
        if (ListCount(AllObjects()) > 0) {
          firstRoom = ObjectListItem(AllObjects(), 0)
        }
        else {
          create ("room")
          firstRoom = room
        }
        create ("player")
        player.parent = firstRoom
      }
      game.pov = player
    }
    else {
      InitPOV (null, game.pov)
    }
    InitStatusAttributes
    UpdateStatusAttributes
    InitVerbsList
    if (HasScript(game, "start")) do (game, "start")
    foreach (obj, AllObjects()) {
      if (HasScript(obj, "_initialise_")) do (obj, "_initialise_")
    }
    UpdateStatusAttributes
    UpdateObjectLinks
    on ready {
      if (game.gridmap) {
        Grid_DrawPlayerInRoom (game.pov.parent)
      }
      if (game.displayroomdescriptiononstart) {
        OnEnterRoom (null)
      }
      UpdateStatusAttributes
      UpdateObjectLinks
    }
    ]]>
  </function>

  <function name="RandomChance" parameters="percentile" type="boolean">
    <![CDATA[
    return (GetRandomInt(1,100) <= percentile)
    ]]>
  </function>

  <function name="SetObjectFlagOn" parameters="object, flag">
    set (object, flag, true)
  </function>

  <function name="SetObjectFlagOff" parameters="object, flag">
    set (object, flag, false)
  </function>

  <function name="IncreaseObjectCounter" parameters="object, counter">
    if (not HasInt(object, counter)) {
      set (object, counter, 0)
    }
    set (object, counter, GetInt(object, counter) + 1)
  </function>

  <function name="DecreaseObjectCounter" parameters="object, counter">
    if (not HasInt(object, counter)) {
      set (object, counter, 0)
    }
    set (object, counter, GetInt(object, counter) - 1)
  </function>
  
  <function name="IsSwitchedOn" parameters="object" type="boolean">
    return (GetBoolean(object, "switchedon"))
  </function>

  <function name="AddToInventory" parameters="object">
    object.parent = game.pov
  </function>

  <function name="MoveObject" parameters="object, parent">
    object.parent = parent
  </function>

  <function name="MoveObjectHere" parameters="object">
    object.parent = game.pov.parent
  </function>

  <function name="RemoveObject" parameters="object">
    object.parent = null
  </function>

  <function name="MakeObjectVisible" parameters="object">
    object.visible = true
  </function>

  <function name="MakeObjectInvisible" parameters="object">
    object.visible = false
  </function>

  <function name="MakeExitVisible" parameters="object">
    object.visible = true
  </function>

  <function name="MakeExitInvisible" parameters="object">
    object.visible = false
  </function>
  
  <function name="HelperOpenObject" parameters="object">
    object.isopen = true
  </function>

  <function name="HelperCloseObject" parameters="object">
    object.isopen = false
  </function>

  <function name="CloneObject" parameters="object" type="object">
    newobject = Clone(object)
    if (not HasString(object, "alias")) {
      newobject.alias = object.name
    }
    return (newobject)
  </function>

  <function name="CloneObjectAndMove" parameters="object, newparent" type="object">
    newobject = CloneObject(object)
    newobject.parent = newparent
    return (newobject)
  </function>

  <function name="CloneObjectAndMoveHere" parameters="object" type="object">
    newobject = CloneObject(object)
    newobject.parent = game.pov.parent
    return (newobject)
  </function>

  <function name="LockExit" parameters="exit">
    exit.locked = true
  </function>

  <function name="UnlockExit" parameters="exit">
    exit.locked = false
  </function>

  <function name="SwitchOn" parameters="object">
    object.switchedon = true
  </function>

  <function name="SwitchOff" parameters="object">
    object.switchedon = false
  </function>

  <function name="SetDark" parameters="object">
    object.dark = true
  </function>  

  <function name="SetLight" parameters="object">
    object.dark = false
  </function>

  <function name="SetObjectLightstrength" parameters="object,strength">
    if (LengthOf(strength) = 0) {
      object.lightsource = false
    } else {
      object.lightsource = true
    }
    object.lightstrength = strength
  </function>

  <function name="SetExitLightstrength" parameters="exit,strength">
    if (LengthOf(strength) = 0) {
      exit.lightsource = false
    } else {
      exit.lightsource = true
    }    
    exit.lightstrength = strength
  </function>
  
  <function name="ChangePOV" parameters="object">
    <![CDATA[
    if (game.pov <> object) {
      game.pov = object
      if (game.gridmap) {
        JS.Grid_ClearAllLayers()
        Grid_Redraw
      }
      OnEnterRoom (null)
    }
    ]]>
  </function>

  <function name="InitPOV" parameters="oldPOV, newPOV">
    <![CDATA[
    if (oldPOV <> null) {
      oldPOV.alias = oldPOV.external_alias
      oldPOV.alt = oldPOV.external_alt
      oldPOV.look = oldPOV.external_look
      oldPOV.gender = oldPOV.external_gender
      oldPOV.article = oldPOV.external_article
    }

    newPOV.external_alias = newPOV.alias
    newPOV.external_alt = newPOV.alt
    newPOV.external_look = newPOV.look
    newPOV.external_gender = newPOV.gender
    newPOV.external_article = newPOV.article
    
    if (not GetBoolean(newPOV, "pov_used")) {
      if (newPOV.alt = null) {
        newPOV.pov_alt = newPOV.pov_alt  // ensure we have our own copy of the list
      }
      else {
        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)
      }
      if (newPOV.alias <> null) {
        list add (newPOV.pov_alt, newPOV.alias)
      }
      
      if (game.showhealth) {
        newPOV.health = 100
        newPOV.changedhealth => {
          if (this.health > 100) {
            this.health = 100
          }
          else if (this.health = 0) {
            if (HasScript(game, "onhealthzero")) {
              do (game, "onhealthzero")
            }
          }
          else if (this.health < 0) {
            this.health = 0
            // changedhealth will be called again so the onhealthzero script will run
          }
        }
      }

      newPOV.pov_used = true
    }

    newPOV.alias = newPOV.pov_alias
    newPOV.alt = newPOV.pov_alt
    newPOV.look = newPOV.pov_look
    newPOV.gender = newPOV.pov_gender
    newPOV.article = newPOV.pov_article
    ]]>
  </function>

  <function name="InitVerbsList">
    game.verbattributes = NewStringList()
    game.verbattributeslookup = NewObjectDictionary()
    foreach (cmd, AllCommands()) {
      if (HasString(cmd, "property")) {
        list add (game.verbattributes, cmd.property)
        dictionary add (game.verbattributeslookup, cmd.property, cmd)
      }
    }
  </function>

  <function name="GetDisplayVerbs" parameters="object" type="stringlist">
    if (Contains(game.pov, object)) {
      baselist = object.inventoryverbs
    }
    else {
      baselist = object.displayverbs
    }
    
    if (not game.autodisplayverbs or GetBoolean(object, "usestandardverblist")) {
      return (baselist)
    }
    else {
      if (HasAttribute(object, "generatedverbslist")) {
        verbs = object.generatedverbslist
      }
      else {
        verbs = NewStringList()
        foreach (attr, GetAttributeNames(object, false)) {
          if (ListContains(game.verbattributes, attr)) {
            cmd = ObjectDictionaryItem(game.verbattributeslookup, attr)
            if (HasString(cmd, "displayverb")) {
              displayverb = CapFirst(cmd.displayverb)
            }
            else {
              displayverb = CapFirst(attr)
            }
            if (not ListContains(baselist, displayverb)) {
              list add (verbs, displayverb)
            }
          }
        }
        object.generatedverbslist = verbs
      }
      if (GetBoolean(object, "useindividualverblist")) {
        return (verbs)
      }
      else {
        return (ListCombine(baselist, verbs))
      }  
    }
  </function>

  <function name="ShowMenu" parameters="caption, options, allowCancel, callback">
    <![CDATA[
    outputsection = StartNewOutputSection()
    msg (caption)
    
    count = 0
    game.menuoptionskeys = NewStringList()
    foreach (option, options) {
      list add (game.menuoptionskeys, option)
      count = count + 1
      if (TypeOf(options) = "stringlist") {
        optionText = option
      }
      else {
        optionText = StringDictionaryItem(options, option)
      }
      msg (count + ": <a class=\"cmdlink\" style=\"" + GetCurrentLinkTextFormat() + "\" onclick=\"ASLEvent('ShowMenuResponse','" + option + "')\">" + optionText + "</a>")
    }
    EndOutputSection(outputsection)
    
    game.menuoptions = options
    game.menuallowcancel = allowCancel
    game.menucallback = callback
    game.menuoutputsection = outputsection
    ]]>
  </function>

  <function name="ShowMenuResponse" parameters="option">
    if (game.menucallback = null) {
      error ("Unexpected menu response")
    }
    else {
      parameters = NewStringDictionary()
      dictionary add (parameters, "result", option)
      script = game.menucallback
      ClearMenu
      invoke (script, parameters)
    }
  </function>

  <function name="HandleMenuTextResponse" parameters="input" type="boolean">
    <![CDATA[
    handled = false
    if (IsInt(input)) {
      number = ToInt(input)
      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {
        handled = true
        ShowMenuResponse(StringListItem(game.menuoptionskeys, number - 1))
      }
    }
    return (handled)
    ]]>
  </function>

  <function name="ClearMenu">
    HideOutputSection(game.menuoutputsection)
    game.menuoutputsection = null
    game.menuoptions = null
    game.menucallback = null
  </function>

  <function name="StartNewOutputSection" type="string">
    if (not HasInt(game, "lastoutputsection")) {
      game.lastoutputsection = 0
    }
    game.lastoutputsection = game.lastoutputsection + 1
    name = "section" + game.lastoutputsection
    JS.StartOutputSection(name)
    return (name)
  </function>

  <function name="EndOutputSection" parameters="name">
    JS.EndOutputSection(name)
  </function>

  <function name="HideOutputSection" parameters="name">
    JS.HideOutputSection(name)
  </function>

  <function name="StartTurnOutputSection">
    if (HasString(game, "currentturnoutputsection")) {
      game.lastturnoutputsection = game.currentturnoutputsection
      EndOutputSection (game.currentturnoutputsection)
    }
    game.currentturnoutputsection = StartNewOutputSection()
  </function>

  <function name="HidePreviousTurnOutput">
    if (HasString(game, "lastturnoutputsection")) {
      HideOutputSection(game.lastturnoutputsection)
    }
  </function>

  <function name="Ask" parameters="question, callback">
    options = NewStringList()
    list add (options, "[Yes]")
    list add (options, "[No]")
    game.askcallback = callback
    ShowMenu (question, options, false) {
      parameters = NewDictionary()
      if (result = "[Yes]") {
        boolresult = true
      }
      else {
        boolresult = false
      }
      dictionary add (parameters, "result", boolresult)
      callback = game.askcallback
      game.askcallback = null
      invoke (callback, parameters)
    }
  </function>

  <function name="AllKeysAvailable" parameters="object" type="boolean">
    if (HasObject(object, "key")) {
      if (not HasInt(object,"keycount")) {
        object.keycount = 1
        object.key1 = object.key
      }
      if (not HasObject(object, "key1")) {	
	    object.key1 = object.key
	  }	
    }
    for (x, 1, object.keycount) {
      keyname = "key" + ToString(x)
      if (HasObject(object, keyname)) {
        if (not ListContains(ScopeInventory(), GetAttribute(object, keyname))) {
          return (false)
        }
      }
    }  
    return (true)
  </function>
  
  <function name="IndexOf" type="int" parameters="lst, item">
    for (i, 0, ListCount(lst) - 1) {
      x = ListItem(lst, i)
      if (x = item) {
        return (i)
      }
    }
    return (-1)
  </function>
</library>
