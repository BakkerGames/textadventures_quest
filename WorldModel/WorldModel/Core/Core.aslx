<library>

  <delegate name="AddScript" parameters="object"/>
  <delegate name="AssociatedScope" type="objectlist"/>
  <implied element="object" property="alt" type="list"/>
  <implied element="command" property="pattern" type="simplepattern"/>
  <implied element="command" property="script" type="script"/>
  <implied element="command" property="multiple" type="AssociatedScope"/>
  <implied element="object" property="displayverbs" type="list"/>
  <implied element="object" property="inventoryverbs" type="list"/>
  <implied element="walkthrough" property="steps" type="list"/>
  <implied element="timer" property="interval" type="int"/>
  <implied element="timer" property="script" type="script"/>
  <implied element="turnscript" property="script" type="script"/>

  <include ref="CoreCommands.aslx"/>
  <include ref="CoreParser.aslx"/>
  <include ref="CoreScopes.aslx"/>
  <include ref="CoreTypes.aslx"/>
  <include ref="CoreDescriptions.aslx"/>
  <include ref="CoreTimers.aslx"/>
  <include ref="CoreTurnScripts.aslx"/>
  <include ref="CoreStatusAttributes.aslx"/>
  <include ref="CoreOutput.aslx"/>
  <include ref="CoreGrid.aslx"/>
  <include ref="CoreCombat.aslx"/>
  <include ref="CoreEditor.aslx"/>

  <function name="InitInterface">
    <![CDATA[
    if (game.externalstylesheets <> null) {
      foreach (stylesheet, game.externalstylesheets) {
        request (RunScript, "addExternalStylesheet; " + stylesheet)
      }
    }
    if (game.defaultwebfont = null) {
      request (FontName, game.defaultfont)
    }
    else {
      if (game.defaultwebfont = "") {
        request (FontName, game.defaultfont)
      }
      else {
        request (FontName, "'" + game.defaultwebfont + "', " + game.defaultfont)
      }
    }
    request (FontSize, ToString(game.defaultfontsize))
    if (game.setbackgroundopacity) {
      SetBackgroundOpacity (game.backgroundopacity)
    }
    request (Background, game.defaultbackground)
    request (Foreground, game.defaultforeground)
    request (LinkForeground, game.defaultlinkforeground)
    if (LengthOf(game.backgroundimage) > 0) {
      SetBackgroundImage (game.backgroundimage)
    }
    request (SetCompassDirections, Join(game.compassdirections, ";"))
    request (SetInterfaceString, "InventoryLabel=[InventoryLabel]")
    request (SetInterfaceString, "PlacesObjectsLabel=[PlacesObjectsLabel]")
    request (SetInterfaceString, "CompassLabel=[CompassLabel]")
    request (SetInterfaceString, "InButtonLabel=[InButtonLabel]")
    request (SetInterfaceString, "OutButtonLabel=[OutButtonLabel]")
    request (SetInterfaceString, "EmptyListLabel=[EmptyListLabel]")
    request (SetInterfaceString, "NothingSelectedLabel=[NothingSelectedLabel]")
    request (RunScript, "SetMenuBackground;" + game.menubackground)
    request (RunScript, "SetMenuForeground;" + game.menuforeground)
    request (RunScript, "SetMenuHoverBackground;" + game.menuhoverbackground)
    request (RunScript, "SetMenuHoverForeground;" + game.menuhoverforeground)
    request (RunScript, "SetMenuFontName;" + game.menufont)
    request (RunScript, "SetMenuFontSize;" + game.menufontsize + "pt")
    if (not game.underlinehyperlinks) {
      request (RunScript, "TurnOffHyperlinksUnderline")
    }
    if (game.showpanes) {
      request (Show, "Panes")
    }
    else {
      request (Hide, "Panes")
    }
    if (HasString(game, "panelcontents")) {
      SetFramePicture (game.panelcontents)
    }
    if (game.gridmap) {
      request (RunScript, "ShowGrid; " + game.mapsize)
      Grid_SetScale (game.mapscale)
      DrawMap
    }
    ]]>
  </function>

  <function name="StartGame">
    <![CDATA[
    if (game.pov = null) {
      playerObject = GetObject("player")
      if (playerObject = null) {
        if (ListCount(AllObjects()) > 0) {
          firstRoom = ObjectListItem(AllObjects(), 0)
        }
        else {
          create ("room")
          firstRoom = room
        }
        create ("player")
        player.parent = firstRoom
      }
      game.pov = player
    }
    InitPOV (null, game.pov)
    InitStatusAttributes
    UpdateStatusAttributes
    InitVerbsList
    if (HasScript(game, "start")) do (game, "start")
    UpdateStatusAttributes
    on ready {
      if (game.gridmap) {
        game.pov.parent.grid_x = 0
        game.pov.parent.grid_y = 0
        game.pov.parent.grid_z = 0
        game.pov.parent.grid_render = true
        Grid_CalculateMapCoordinates (game.pov.parent)
        Grid_DrawPlayerInRoom (game.pov.parent)
      }
      if (game.displayroomdescriptiononstart) {
        OnEnterRoom (null)
      }
      UpdateStatusAttributes
    }
    ]]>
  </function>

  <function name="RandomChance" parameters="percentile" type="boolean">
    <![CDATA[
    return (GetRandomInt(1,100) <= percentile)
    ]]>
  </function>

  <function name="SetObjectFlagOn" parameters="object, flag">
    set (object, flag, true)
  </function>

  <function name="SetObjectFlagOff" parameters="object, flag">
    set (object, flag, false)
  </function>

  <function name="IsSwitchedOn" parameters="object" type="boolean">
    return (GetBoolean(object, "switchedon"))
  </function>

  <function name="AddToInventory" parameters="object">
    object.parent = game.pov
  </function>

  <function name="MoveObject" parameters="object, parent">
    object.parent = parent
  </function>

  <function name="RemoveObject" parameters="object">
    object.parent = null
  </function>

  <function name="MakeObjectVisible" parameters="object">
    object.visible = true
  </function>

  <function name="MakeObjectInvisible" parameters="object">
    object.visible = false
  </function>

  <function name="MakeExitVisible" parameters="object">
    object.visible = true
  </function>

  <function name="MakeExitInvisible" parameters="object">
    object.visible = false
  </function>
  
  <function name="HelperOpenObject" parameters="object">
    object.isopen = true
  </function>

  <function name="HelperCloseObject" parameters="object">
    object.isopen = false
  </function>

  <function name="CloneObject" parameters="object" type="object">
    newobject = Clone(object)
    if (not HasString(object, "alias")) {
      newobject.alias = object.name
    }
    return (newobject)
  </function>

  <function name="CloneObjectAndMove" parameters="object, newparent" type="object">
    newobject = CloneObject(object)
    newobject.parent = newparent
    return (newobject)
  </function>

  <function name="LockExit" parameters="exit">
    exit.locked = true
  </function>

  <function name="UnlockExit" parameters="exit">
    exit.locked = false
  </function>

  <function name="SwitchOn" parameters="object">
    object.switchedon = true
  </function>

  <function name="SwitchOff" parameters="object">
    object.switchedon = false
  </function>

  <function name="SetDark" parameters="object">
    object.dark = true
  </function>  

  <function name="SetLight" parameters="object">
    object.dark = false
  </function>

  <function name="SetObjectLightstrength" parameters="object,strength">
    object.lightstrength = strength
  </function>

  <function name="SetExitLightstrength" parameters="exit,strength">
    exit.lightstrength = strength
  </function>
  
  <function name="ChangePOV" parameters="object">
    <![CDATA[
    if (game.pov <> object) {
      game.pov = object
      OnEnterRoom (null)
    }
    ]]>
  </function>

  <function name="InitPOV" parameters="oldPOV, newPOV">
    <![CDATA[
    if (oldPOV <> null) {
      oldPOV.alias = oldPOV.external_alias
      oldPOV.alt = oldPOV.external_alt
      oldPOV.look = oldPOV.external_look
      oldPOV.gender = oldPOV.external_gender
      oldPOV.article = oldPOV.external_article
    }

    newPOV.external_alias = newPOV.alias
    newPOV.external_alt = newPOV.alt
    newPOV.external_look = newPOV.look
    newPOV.external_gender = newPOV.gender
    newPOV.external_article = newPOV.article
    
    if (not GetBoolean(newPOV, "pov_used")) {
      if (newPOV.alt = null) {
        newPOV.pov_alt = newPOV.pov_alt  // ensure we have our own copy of the list
      }
      else {
        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)
      }
      if (newPOV.alias <> null) {
        list add (newPOV.pov_alt, newPOV.alias)
      }
      
      if (game.showhealth) {
        newPOV.health = 100
        newPOV.changedhealth => {
          if (this.health > 100) {
            this.health = 100
          }
          else if (this.health <= 0) {
            this.health = 0
            if (HasScript(game, "onhealthzero")) {
              do (game, "onhealthzero")
            }
          }
        }
      }

      newPOV.pov_used = true
    }

    newPOV.alias = newPOV.pov_alias
    newPOV.alt = newPOV.pov_alt
    newPOV.look = newPOV.pov_look
    newPOV.gender = newPOV.pov_gender
    newPOV.article = newPOV.pov_article
    ]]>
  </function>

  <function name="InitVerbsList">
    game.verbattributes = NewStringList()
    game.verbattributeslookup = NewObjectDictionary()
    foreach (cmd, AllCommands()) {
      if (HasString(cmd, "property")) {
        list add (game.verbattributes, cmd.property)
        dictionary add (game.verbattributeslookup, cmd.property, cmd)
      }
    }
  </function>

  <function name="GetDisplayVerbs" parameters="object" type="stringlist">
    if (Contains(game.pov, object)) {
      baselist = object.inventoryverbs
    }
    else {
      baselist = object.displayverbs
    }
    
    if (not game.autodisplayverbs) {
      return (baselist)
    }
    else {
      if (HasAttribute(object, "generatedverbslist")) {
        verbs = object.generatedverbslist
      }
      else {
        verbs = NewStringList()
        foreach (attr, GetAttributeNames(object, false)) {
          if (ListContains(game.verbattributes, attr)) {
            cmd = ObjectDictionaryItem(game.verbattributeslookup, attr)
            if (HasString(cmd, "displayverb")) {
              list add (verbs, CapFirst(cmd.displayverb))
            }
            else {
              list add (verbs, CapFirst(attr))
            }
          }
        }
        object.generatedverbslist = verbs
      }
      return (ListCombine(baselist, verbs))
    }
  </function>
  
</library>
