<library>

  <delegate name="AddScript" parameters="object"/>
  <delegate name="AssociatedScope" type="objectlist"/>
  <implied element="object" property="alt" type="list"/>
  <implied element="command" property="pattern" type="simplepattern"/>
  <implied element="command" property="script" type="script"/>
  <implied element="command" property="multiple" type="AssociatedScope"/>
  <implied element="object" property="displayverbs" type="list"/>
  <implied element="object" property="inventoryverbs" type="list"/>
  <implied element="walkthrough" property="steps" type="list"/>
  <implied element="timer" property="interval" type="int"/>
  <implied element="timer" property="script" type="script"/>
  <implied element="turnscript" property="script" type="script"/>

  <include ref="CoreCommands.aslx"/>
  <include ref="CoreParser.aslx"/>
  <include ref="CoreScopes.aslx"/>
  <include ref="CoreTypes.aslx"/>
  <include ref="CoreDescriptions.aslx"/>
  <include ref="CoreTimers.aslx"/>
  <include ref="CoreTurnScripts.aslx"/>
  <include ref="CoreStatusAttributes.aslx"/>
  <include ref="CoreOutput.aslx"/>
  <include ref="CoreEditor.aslx"/>

  <resource src="Frame.htm"/>
  <javascript src="Frame.js"/>

  <function name="InitInterface">
    request (FontName, game.defaultfont)
    request (FontSize, ToString(game.defaultfontsize))
    request (Background, game.defaultbackground)
    request (Foreground, game.defaultforeground)
    request (LinkForeground, game.defaultlinkforeground)
    request (SetCompassDirections, Join(game.compassdirections, ";"))
    request (SetInterfaceString, "InventoryLabel=[InventoryLabel]")
    request (SetInterfaceString, "PlacesObjectsLabel=[PlacesObjectsLabel]")
    request (SetInterfaceString, "CompassLabel=[CompassLabel]")
    request (SetInterfaceString, "InButtonLabel=[InButtonLabel]")
    request (SetInterfaceString, "OutButtonLabel=[OutButtonLabel]")
    request (SetInterfaceString, "EmptyListLabel=[EmptyListLabel]")
    request (SetInterfaceString, "NothingSelectedLabel=[NothingSelectedLabel]")
    request (RunScript, "SetMenuBackground;" + game.menubackground)
    request (RunScript, "SetMenuForeground;" + game.menuforeground)
    request (RunScript, "SetMenuHoverBackground;" + game.menuhoverbackground)
    request (RunScript, "SetMenuHoverForeground;" + game.menuhoverforeground)
    request (RunScript, "SetMenuFontName;" + game.menufont)
    request (RunScript, "SetMenuFontSize;" + game.menufontsize + "pt")
    if (not game.underlinehyperlinks) {
      request (RunScript, "TurnOffHyperlinksUnderline")
    }
    if (game.showpanes) {
      request (Show, "Panes")
    }
    else {
      request (Hide, "Panes")
    }
  </function>

  <function name="StartGame">
    <![CDATA[
    UpdateStatusAttributes
    if (HasScript(game, "start")) do (game, "start")
    UpdateStatusAttributes
    if (game.displayroomdescriptiononstart) {
      OnEnterRoom (null)
    }
    UpdateStatusAttributes
    ]]>
  </function>

  <function name="RandomChance" parameters="percentile" type="boolean">
    <![CDATA[
    return (GetRandomInt(1,100) <= percentile)
    ]]>
  </function>

  <function name="SetObjectFlagOn" parameters="object, flag">
    set (object, flag, true)
  </function>

  <function name="SetObjectFlagOff" parameters="object, flag">
    set (object, flag, false)
  </function>

  <function name="IsSwitchedOn" parameters="object" type="boolean">
    return (GetBoolean(object, "switchedon"))
  </function>

  <function name="MoveObject" parameters="object, parent">
    object.parent = parent
  </function>

  <function name="RemoveObject" parameters="object">
    object.parent = null
  </function>

  <function name="HelperOpenObject" parameters="object">
    object.isopen = true
  </function>

  <function name="HelperCloseObject" parameters="object">
    object.isopen = false
  </function>

  <function name="CloneObject" parameters="object" type="object">
    newobject = Clone(object)
    if (not HasString(object, "alias")) {
      newobject.alias = object.name
    }
    return (newobject)
  </function>

  <function name="CloneObjectAndMove" parameters="object, newparent" type="object">
    newobject = CloneObject(object)
    newobject.parent = newparent
    return (newobject)
  </function>

  <function name="LockExit" parameters="exit">
    exit.locked = true
  </function>

  <function name="UnlockExit" parameters="exit">
    exit.locked = false
  </function>
</library>
